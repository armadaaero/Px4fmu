/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/estimator_status.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/estimator_status.h>

constexpr char __orb_estimator_status_fields[] = "uint64_t timestamp;float[24] states;float n_states;float[3] vibe;float[24] covariances;uint32_t control_mode_flags;float pos_horiz_accuracy;float pos_vert_accuracy;float mag_test_ratio;float vel_test_ratio;float pos_test_ratio;float hgt_test_ratio;float tas_test_ratio;float hagl_test_ratio;float time_slip;uint16_t gps_check_fail_flags;uint16_t filter_fault_flags;uint16_t innovation_check_flags;uint16_t solution_status_flags;uint8_t nan_flags;uint8_t health_flags;uint8_t timeout_flags;uint8_t[5] _padding0;";

ORB_DEFINE(estimator_status, struct estimator_status_s, 267,
    __orb_estimator_status_fields);



void serialize_estimator_status(const struct estimator_status_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeFloatArray(input->states, 24, microCDRWriter);
	serializeFloat(input->n_states, microCDRWriter);
	serializeFloatArray(input->vibe, 3, microCDRWriter);
	serializeFloatArray(input->covariances, 24, microCDRWriter);
	serializeUnsignedInt(input->control_mode_flags, microCDRWriter);
	serializeFloat(input->pos_horiz_accuracy, microCDRWriter);
	serializeFloat(input->pos_vert_accuracy, microCDRWriter);
	serializeFloat(input->mag_test_ratio, microCDRWriter);
	serializeFloat(input->vel_test_ratio, microCDRWriter);
	serializeFloat(input->pos_test_ratio, microCDRWriter);
	serializeFloat(input->hgt_test_ratio, microCDRWriter);
	serializeFloat(input->tas_test_ratio, microCDRWriter);
	serializeFloat(input->hagl_test_ratio, microCDRWriter);
	serializeFloat(input->time_slip, microCDRWriter);
	serializeUnsignedShort(input->gps_check_fail_flags, microCDRWriter);
	serializeUnsignedShort(input->filter_fault_flags, microCDRWriter);
	serializeUnsignedShort(input->innovation_check_flags, microCDRWriter);
	serializeUnsignedShort(input->solution_status_flags, microCDRWriter);
	serializeUnsignedChar(input->nan_flags, microCDRWriter);
	serializeUnsignedChar(input->health_flags, microCDRWriter);
	serializeUnsignedChar(input->timeout_flags, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_estimator_status(struct estimator_status_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeFloat(&output->states[0], microCDRReader);
	deserializeFloat(&output->states[1], microCDRReader);
	deserializeFloat(&output->states[2], microCDRReader);
	deserializeFloat(&output->states[3], microCDRReader);
	deserializeFloat(&output->states[4], microCDRReader);
	deserializeFloat(&output->states[5], microCDRReader);
	deserializeFloat(&output->states[6], microCDRReader);
	deserializeFloat(&output->states[7], microCDRReader);
	deserializeFloat(&output->states[8], microCDRReader);
	deserializeFloat(&output->states[9], microCDRReader);
	deserializeFloat(&output->states[10], microCDRReader);
	deserializeFloat(&output->states[11], microCDRReader);
	deserializeFloat(&output->states[12], microCDRReader);
	deserializeFloat(&output->states[13], microCDRReader);
	deserializeFloat(&output->states[14], microCDRReader);
	deserializeFloat(&output->states[15], microCDRReader);
	deserializeFloat(&output->states[16], microCDRReader);
	deserializeFloat(&output->states[17], microCDRReader);
	deserializeFloat(&output->states[18], microCDRReader);
	deserializeFloat(&output->states[19], microCDRReader);
	deserializeFloat(&output->states[20], microCDRReader);
	deserializeFloat(&output->states[21], microCDRReader);
	deserializeFloat(&output->states[22], microCDRReader);
	deserializeFloat(&output->states[23], microCDRReader);
	deserializeFloat(&output->n_states, microCDRReader);
	deserializeFloat(&output->vibe[0], microCDRReader);
	deserializeFloat(&output->vibe[1], microCDRReader);
	deserializeFloat(&output->vibe[2], microCDRReader);
	deserializeFloat(&output->covariances[0], microCDRReader);
	deserializeFloat(&output->covariances[1], microCDRReader);
	deserializeFloat(&output->covariances[2], microCDRReader);
	deserializeFloat(&output->covariances[3], microCDRReader);
	deserializeFloat(&output->covariances[4], microCDRReader);
	deserializeFloat(&output->covariances[5], microCDRReader);
	deserializeFloat(&output->covariances[6], microCDRReader);
	deserializeFloat(&output->covariances[7], microCDRReader);
	deserializeFloat(&output->covariances[8], microCDRReader);
	deserializeFloat(&output->covariances[9], microCDRReader);
	deserializeFloat(&output->covariances[10], microCDRReader);
	deserializeFloat(&output->covariances[11], microCDRReader);
	deserializeFloat(&output->covariances[12], microCDRReader);
	deserializeFloat(&output->covariances[13], microCDRReader);
	deserializeFloat(&output->covariances[14], microCDRReader);
	deserializeFloat(&output->covariances[15], microCDRReader);
	deserializeFloat(&output->covariances[16], microCDRReader);
	deserializeFloat(&output->covariances[17], microCDRReader);
	deserializeFloat(&output->covariances[18], microCDRReader);
	deserializeFloat(&output->covariances[19], microCDRReader);
	deserializeFloat(&output->covariances[20], microCDRReader);
	deserializeFloat(&output->covariances[21], microCDRReader);
	deserializeFloat(&output->covariances[22], microCDRReader);
	deserializeFloat(&output->covariances[23], microCDRReader);
	deserializeUnsignedInt(&output->control_mode_flags, microCDRReader);
	deserializeFloat(&output->pos_horiz_accuracy, microCDRReader);
	deserializeFloat(&output->pos_vert_accuracy, microCDRReader);
	deserializeFloat(&output->mag_test_ratio, microCDRReader);
	deserializeFloat(&output->vel_test_ratio, microCDRReader);
	deserializeFloat(&output->pos_test_ratio, microCDRReader);
	deserializeFloat(&output->hgt_test_ratio, microCDRReader);
	deserializeFloat(&output->tas_test_ratio, microCDRReader);
	deserializeFloat(&output->hagl_test_ratio, microCDRReader);
	deserializeFloat(&output->time_slip, microCDRReader);
	deserializeUnsignedShort(&output->gps_check_fail_flags, microCDRReader);
	deserializeUnsignedShort(&output->filter_fault_flags, microCDRReader);
	deserializeUnsignedShort(&output->innovation_check_flags, microCDRReader);
	deserializeUnsignedShort(&output->solution_status_flags, microCDRReader);
	deserializeUnsignedChar(&output->nan_flags, microCDRReader);
	deserializeUnsignedChar(&output->health_flags, microCDRReader);
	deserializeUnsignedChar(&output->timeout_flags, microCDRReader);

}