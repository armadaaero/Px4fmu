/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/uavcan_parameter_request.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/uavcan_parameter_request.h>

constexpr char __orb_uavcan_parameter_request_fields[] = "uint64_t timestamp;int64_t int_value;float real_value;int16_t param_index;uint8_t message_type;uint8_t node_id;char[17] param_id;uint8_t param_type;uint8_t[6] _padding0;";

ORB_DEFINE(uavcan_parameter_request, struct uavcan_parameter_request_s, 42,
    __orb_uavcan_parameter_request_fields);



void serialize_uavcan_parameter_request(const struct uavcan_parameter_request_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeLong(input->int_value, microCDRWriter);
	serializeFloat(input->real_value, microCDRWriter);
	serializeShort(input->param_index, microCDRWriter);
	serializeUnsignedChar(input->message_type, microCDRWriter);
	serializeUnsignedChar(input->node_id, microCDRWriter);
	serializeCharArray(input->param_id, 17, microCDRWriter);
	serializeUnsignedChar(input->param_type, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_uavcan_parameter_request(struct uavcan_parameter_request_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeLong(&output->int_value, microCDRReader);
	deserializeFloat(&output->real_value, microCDRReader);
	deserializeShort(&output->param_index, microCDRReader);
	deserializeUnsignedChar(&output->message_type, microCDRReader);
	deserializeUnsignedChar(&output->node_id, microCDRReader);
	deserializeChar(&output->param_id[0], microCDRReader);
	deserializeChar(&output->param_id[1], microCDRReader);
	deserializeChar(&output->param_id[2], microCDRReader);
	deserializeChar(&output->param_id[3], microCDRReader);
	deserializeChar(&output->param_id[4], microCDRReader);
	deserializeChar(&output->param_id[5], microCDRReader);
	deserializeChar(&output->param_id[6], microCDRReader);
	deserializeChar(&output->param_id[7], microCDRReader);
	deserializeChar(&output->param_id[8], microCDRReader);
	deserializeChar(&output->param_id[9], microCDRReader);
	deserializeChar(&output->param_id[10], microCDRReader);
	deserializeChar(&output->param_id[11], microCDRReader);
	deserializeChar(&output->param_id[12], microCDRReader);
	deserializeChar(&output->param_id[13], microCDRReader);
	deserializeChar(&output->param_id[14], microCDRReader);
	deserializeChar(&output->param_id[15], microCDRReader);
	deserializeChar(&output->param_id[16], microCDRReader);
	deserializeUnsignedChar(&output->param_type, microCDRReader);

}