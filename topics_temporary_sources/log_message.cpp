/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/log_message.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/log_message.h>

constexpr char __orb_log_message_fields[] = "uint64_t timestamp;uint8_t severity;uint8_t[127] text;";

ORB_DEFINE(log_message, struct log_message_s, 136,
    __orb_log_message_fields);



void serialize_log_message(const struct log_message_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeUnsignedChar(input->severity, microCDRWriter);
	serializeUnsignedCharArray(input->text, 127, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_log_message(struct log_message_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeUnsignedChar(&output->severity, microCDRReader);
	deserializeUnsignedChar(&output->text[0], microCDRReader);
	deserializeUnsignedChar(&output->text[1], microCDRReader);
	deserializeUnsignedChar(&output->text[2], microCDRReader);
	deserializeUnsignedChar(&output->text[3], microCDRReader);
	deserializeUnsignedChar(&output->text[4], microCDRReader);
	deserializeUnsignedChar(&output->text[5], microCDRReader);
	deserializeUnsignedChar(&output->text[6], microCDRReader);
	deserializeUnsignedChar(&output->text[7], microCDRReader);
	deserializeUnsignedChar(&output->text[8], microCDRReader);
	deserializeUnsignedChar(&output->text[9], microCDRReader);
	deserializeUnsignedChar(&output->text[10], microCDRReader);
	deserializeUnsignedChar(&output->text[11], microCDRReader);
	deserializeUnsignedChar(&output->text[12], microCDRReader);
	deserializeUnsignedChar(&output->text[13], microCDRReader);
	deserializeUnsignedChar(&output->text[14], microCDRReader);
	deserializeUnsignedChar(&output->text[15], microCDRReader);
	deserializeUnsignedChar(&output->text[16], microCDRReader);
	deserializeUnsignedChar(&output->text[17], microCDRReader);
	deserializeUnsignedChar(&output->text[18], microCDRReader);
	deserializeUnsignedChar(&output->text[19], microCDRReader);
	deserializeUnsignedChar(&output->text[20], microCDRReader);
	deserializeUnsignedChar(&output->text[21], microCDRReader);
	deserializeUnsignedChar(&output->text[22], microCDRReader);
	deserializeUnsignedChar(&output->text[23], microCDRReader);
	deserializeUnsignedChar(&output->text[24], microCDRReader);
	deserializeUnsignedChar(&output->text[25], microCDRReader);
	deserializeUnsignedChar(&output->text[26], microCDRReader);
	deserializeUnsignedChar(&output->text[27], microCDRReader);
	deserializeUnsignedChar(&output->text[28], microCDRReader);
	deserializeUnsignedChar(&output->text[29], microCDRReader);
	deserializeUnsignedChar(&output->text[30], microCDRReader);
	deserializeUnsignedChar(&output->text[31], microCDRReader);
	deserializeUnsignedChar(&output->text[32], microCDRReader);
	deserializeUnsignedChar(&output->text[33], microCDRReader);
	deserializeUnsignedChar(&output->text[34], microCDRReader);
	deserializeUnsignedChar(&output->text[35], microCDRReader);
	deserializeUnsignedChar(&output->text[36], microCDRReader);
	deserializeUnsignedChar(&output->text[37], microCDRReader);
	deserializeUnsignedChar(&output->text[38], microCDRReader);
	deserializeUnsignedChar(&output->text[39], microCDRReader);
	deserializeUnsignedChar(&output->text[40], microCDRReader);
	deserializeUnsignedChar(&output->text[41], microCDRReader);
	deserializeUnsignedChar(&output->text[42], microCDRReader);
	deserializeUnsignedChar(&output->text[43], microCDRReader);
	deserializeUnsignedChar(&output->text[44], microCDRReader);
	deserializeUnsignedChar(&output->text[45], microCDRReader);
	deserializeUnsignedChar(&output->text[46], microCDRReader);
	deserializeUnsignedChar(&output->text[47], microCDRReader);
	deserializeUnsignedChar(&output->text[48], microCDRReader);
	deserializeUnsignedChar(&output->text[49], microCDRReader);
	deserializeUnsignedChar(&output->text[50], microCDRReader);
	deserializeUnsignedChar(&output->text[51], microCDRReader);
	deserializeUnsignedChar(&output->text[52], microCDRReader);
	deserializeUnsignedChar(&output->text[53], microCDRReader);
	deserializeUnsignedChar(&output->text[54], microCDRReader);
	deserializeUnsignedChar(&output->text[55], microCDRReader);
	deserializeUnsignedChar(&output->text[56], microCDRReader);
	deserializeUnsignedChar(&output->text[57], microCDRReader);
	deserializeUnsignedChar(&output->text[58], microCDRReader);
	deserializeUnsignedChar(&output->text[59], microCDRReader);
	deserializeUnsignedChar(&output->text[60], microCDRReader);
	deserializeUnsignedChar(&output->text[61], microCDRReader);
	deserializeUnsignedChar(&output->text[62], microCDRReader);
	deserializeUnsignedChar(&output->text[63], microCDRReader);
	deserializeUnsignedChar(&output->text[64], microCDRReader);
	deserializeUnsignedChar(&output->text[65], microCDRReader);
	deserializeUnsignedChar(&output->text[66], microCDRReader);
	deserializeUnsignedChar(&output->text[67], microCDRReader);
	deserializeUnsignedChar(&output->text[68], microCDRReader);
	deserializeUnsignedChar(&output->text[69], microCDRReader);
	deserializeUnsignedChar(&output->text[70], microCDRReader);
	deserializeUnsignedChar(&output->text[71], microCDRReader);
	deserializeUnsignedChar(&output->text[72], microCDRReader);
	deserializeUnsignedChar(&output->text[73], microCDRReader);
	deserializeUnsignedChar(&output->text[74], microCDRReader);
	deserializeUnsignedChar(&output->text[75], microCDRReader);
	deserializeUnsignedChar(&output->text[76], microCDRReader);
	deserializeUnsignedChar(&output->text[77], microCDRReader);
	deserializeUnsignedChar(&output->text[78], microCDRReader);
	deserializeUnsignedChar(&output->text[79], microCDRReader);
	deserializeUnsignedChar(&output->text[80], microCDRReader);
	deserializeUnsignedChar(&output->text[81], microCDRReader);
	deserializeUnsignedChar(&output->text[82], microCDRReader);
	deserializeUnsignedChar(&output->text[83], microCDRReader);
	deserializeUnsignedChar(&output->text[84], microCDRReader);
	deserializeUnsignedChar(&output->text[85], microCDRReader);
	deserializeUnsignedChar(&output->text[86], microCDRReader);
	deserializeUnsignedChar(&output->text[87], microCDRReader);
	deserializeUnsignedChar(&output->text[88], microCDRReader);
	deserializeUnsignedChar(&output->text[89], microCDRReader);
	deserializeUnsignedChar(&output->text[90], microCDRReader);
	deserializeUnsignedChar(&output->text[91], microCDRReader);
	deserializeUnsignedChar(&output->text[92], microCDRReader);
	deserializeUnsignedChar(&output->text[93], microCDRReader);
	deserializeUnsignedChar(&output->text[94], microCDRReader);
	deserializeUnsignedChar(&output->text[95], microCDRReader);
	deserializeUnsignedChar(&output->text[96], microCDRReader);
	deserializeUnsignedChar(&output->text[97], microCDRReader);
	deserializeUnsignedChar(&output->text[98], microCDRReader);
	deserializeUnsignedChar(&output->text[99], microCDRReader);
	deserializeUnsignedChar(&output->text[100], microCDRReader);
	deserializeUnsignedChar(&output->text[101], microCDRReader);
	deserializeUnsignedChar(&output->text[102], microCDRReader);
	deserializeUnsignedChar(&output->text[103], microCDRReader);
	deserializeUnsignedChar(&output->text[104], microCDRReader);
	deserializeUnsignedChar(&output->text[105], microCDRReader);
	deserializeUnsignedChar(&output->text[106], microCDRReader);
	deserializeUnsignedChar(&output->text[107], microCDRReader);
	deserializeUnsignedChar(&output->text[108], microCDRReader);
	deserializeUnsignedChar(&output->text[109], microCDRReader);
	deserializeUnsignedChar(&output->text[110], microCDRReader);
	deserializeUnsignedChar(&output->text[111], microCDRReader);
	deserializeUnsignedChar(&output->text[112], microCDRReader);
	deserializeUnsignedChar(&output->text[113], microCDRReader);
	deserializeUnsignedChar(&output->text[114], microCDRReader);
	deserializeUnsignedChar(&output->text[115], microCDRReader);
	deserializeUnsignedChar(&output->text[116], microCDRReader);
	deserializeUnsignedChar(&output->text[117], microCDRReader);
	deserializeUnsignedChar(&output->text[118], microCDRReader);
	deserializeUnsignedChar(&output->text[119], microCDRReader);
	deserializeUnsignedChar(&output->text[120], microCDRReader);
	deserializeUnsignedChar(&output->text[121], microCDRReader);
	deserializeUnsignedChar(&output->text[122], microCDRReader);
	deserializeUnsignedChar(&output->text[123], microCDRReader);
	deserializeUnsignedChar(&output->text[124], microCDRReader);
	deserializeUnsignedChar(&output->text[125], microCDRReader);
	deserializeUnsignedChar(&output->text[126], microCDRReader);

}