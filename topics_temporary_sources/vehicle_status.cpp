/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/vehicle_status.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/vehicle_status.h>

constexpr char __orb_vehicle_status_fields[] = "uint64_t timestamp;uint32_t system_id;uint32_t component_id;uint32_t onboard_control_sensors_present;uint32_t onboard_control_sensors_enabled;uint32_t onboard_control_sensors_health;uint8_t nav_state;uint8_t arming_state;uint8_t hil_state;bool failsafe;uint8_t system_type;bool is_rotary_wing;bool is_vtol;bool vtol_fw_permanent_stab;bool in_transition_mode;bool in_transition_to_fw;bool rc_signal_lost;uint8_t rc_input_mode;bool data_link_lost;uint8_t data_link_lost_counter;bool engine_failure;bool engine_failure_cmd;bool mission_failure;uint8_t[3] _padding0;";

ORB_DEFINE(vehicle_status, struct vehicle_status_s, 45,
    __orb_vehicle_status_fields);



void serialize_vehicle_status(const struct vehicle_status_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeUnsignedInt(input->system_id, microCDRWriter);
	serializeUnsignedInt(input->component_id, microCDRWriter);
	serializeUnsignedInt(input->onboard_control_sensors_present, microCDRWriter);
	serializeUnsignedInt(input->onboard_control_sensors_enabled, microCDRWriter);
	serializeUnsignedInt(input->onboard_control_sensors_health, microCDRWriter);
	serializeUnsignedChar(input->nav_state, microCDRWriter);
	serializeUnsignedChar(input->arming_state, microCDRWriter);
	serializeUnsignedChar(input->hil_state, microCDRWriter);
	serializeBool(input->failsafe, microCDRWriter);
	serializeUnsignedChar(input->system_type, microCDRWriter);
	serializeBool(input->is_rotary_wing, microCDRWriter);
	serializeBool(input->is_vtol, microCDRWriter);
	serializeBool(input->vtol_fw_permanent_stab, microCDRWriter);
	serializeBool(input->in_transition_mode, microCDRWriter);
	serializeBool(input->in_transition_to_fw, microCDRWriter);
	serializeBool(input->rc_signal_lost, microCDRWriter);
	serializeUnsignedChar(input->rc_input_mode, microCDRWriter);
	serializeBool(input->data_link_lost, microCDRWriter);
	serializeUnsignedChar(input->data_link_lost_counter, microCDRWriter);
	serializeBool(input->engine_failure, microCDRWriter);
	serializeBool(input->engine_failure_cmd, microCDRWriter);
	serializeBool(input->mission_failure, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_vehicle_status(struct vehicle_status_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeUnsignedInt(&output->system_id, microCDRReader);
	deserializeUnsignedInt(&output->component_id, microCDRReader);
	deserializeUnsignedInt(&output->onboard_control_sensors_present, microCDRReader);
	deserializeUnsignedInt(&output->onboard_control_sensors_enabled, microCDRReader);
	deserializeUnsignedInt(&output->onboard_control_sensors_health, microCDRReader);
	deserializeUnsignedChar(&output->nav_state, microCDRReader);
	deserializeUnsignedChar(&output->arming_state, microCDRReader);
	deserializeUnsignedChar(&output->hil_state, microCDRReader);
	deserializeBool(&output->failsafe, microCDRReader);
	deserializeUnsignedChar(&output->system_type, microCDRReader);
	deserializeBool(&output->is_rotary_wing, microCDRReader);
	deserializeBool(&output->is_vtol, microCDRReader);
	deserializeBool(&output->vtol_fw_permanent_stab, microCDRReader);
	deserializeBool(&output->in_transition_mode, microCDRReader);
	deserializeBool(&output->in_transition_to_fw, microCDRReader);
	deserializeBool(&output->rc_signal_lost, microCDRReader);
	deserializeUnsignedChar(&output->rc_input_mode, microCDRReader);
	deserializeBool(&output->data_link_lost, microCDRReader);
	deserializeUnsignedChar(&output->data_link_lost_counter, microCDRReader);
	deserializeBool(&output->engine_failure, microCDRReader);
	deserializeBool(&output->engine_failure_cmd, microCDRReader);
	deserializeBool(&output->mission_failure, microCDRReader);

}