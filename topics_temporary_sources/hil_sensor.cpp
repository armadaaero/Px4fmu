/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/hil_sensor.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/hil_sensor.h>

constexpr char __orb_hil_sensor_fields[] = "uint64_t timestamp;uint64_t accelerometer_timestamp;uint64_t magnetometer_timestamp;uint64_t gyro1_timestamp;uint64_t accelerometer1_timestamp;uint64_t magnetometer1_timestamp;uint64_t gyro2_timestamp;uint64_t accelerometer2_timestamp;uint64_t magnetometer2_timestamp;uint64_t baro_timestamp;uint64_t baro1_timestamp;uint64_t differential_pressure_timestamp;uint64_t differential_pressure1_timestamp;float[3] gyro_rad_s;uint32_t gyro_errcount;float gyro_temp;float[3] accelerometer_m_s2;float accelerometer_range_m_s2;uint32_t accelerometer_errcount;float accelerometer_temp;float[3] magnetometer_ga;float magnetometer_range_ga;float magnetometer_cuttoff_freq_hz;uint32_t magnetometer_errcount;float magnetometer_temp;float[3] gyro1_rad_s;uint32_t gyro1_errcount;float gyro1_temp;float[3] accelerometer1_m_s2;uint32_t accelerometer1_errcount;float accelerometer1_temp;float[3] magnetometer1_ga;uint32_t magnetometer1_errcount;float magnetometer1_temp;float[3] gyro2_rad_s;uint32_t gyro2_errcount;float gyro2_temp;float[3] accelerometer2_m_s2;uint32_t accelerometer2_errcount;float accelerometer2_temp;float[3] magnetometer2_ga;uint32_t magnetometer2_errcount;float magnetometer2_temp;float baro_pres_mbar;float baro_alt_meter;float baro_temp_celcius;float baro1_pres_mbar;float baro1_alt_meter;float baro1_temp_celcius;float[10] adc_voltage_v;float mcu_temp_celcius;float differential_pressure_pa;float differential_pressure_filtered_pa;float differential_pressure1_pa;float differential_pressure1_filtered_pa;int16_t[3] gyro_raw;int16_t[3] accelerometer_raw;int16_t accelerometer_mode;int16_t[3] magnetometer_raw;int16_t magnetometer_mode;int16_t[3] gyro1_raw;int16_t[3] accelerometer1_raw;int16_t[3] magnetometer1_raw;int16_t[3] gyro2_raw;int16_t[3] accelerometer2_raw;int16_t[3] magnetometer2_raw;uint16_t[10] adc_mapping;uint8_t[6] _padding0;";

ORB_DEFINE(hil_sensor, struct hil_sensor_s, 458,
    __orb_hil_sensor_fields);



void serialize_hil_sensor(const struct hil_sensor_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeUnsignedLong(input->accelerometer_timestamp, microCDRWriter);
	serializeUnsignedLong(input->magnetometer_timestamp, microCDRWriter);
	serializeUnsignedLong(input->gyro1_timestamp, microCDRWriter);
	serializeUnsignedLong(input->accelerometer1_timestamp, microCDRWriter);
	serializeUnsignedLong(input->magnetometer1_timestamp, microCDRWriter);
	serializeUnsignedLong(input->gyro2_timestamp, microCDRWriter);
	serializeUnsignedLong(input->accelerometer2_timestamp, microCDRWriter);
	serializeUnsignedLong(input->magnetometer2_timestamp, microCDRWriter);
	serializeUnsignedLong(input->baro_timestamp, microCDRWriter);
	serializeUnsignedLong(input->baro1_timestamp, microCDRWriter);
	serializeUnsignedLong(input->differential_pressure_timestamp, microCDRWriter);
	serializeUnsignedLong(input->differential_pressure1_timestamp, microCDRWriter);
	serializeFloatArray(input->gyro_rad_s, 3, microCDRWriter);
	serializeUnsignedInt(input->gyro_errcount, microCDRWriter);
	serializeFloat(input->gyro_temp, microCDRWriter);
	serializeFloatArray(input->accelerometer_m_s2, 3, microCDRWriter);
	serializeFloat(input->accelerometer_range_m_s2, microCDRWriter);
	serializeUnsignedInt(input->accelerometer_errcount, microCDRWriter);
	serializeFloat(input->accelerometer_temp, microCDRWriter);
	serializeFloatArray(input->magnetometer_ga, 3, microCDRWriter);
	serializeFloat(input->magnetometer_range_ga, microCDRWriter);
	serializeFloat(input->magnetometer_cuttoff_freq_hz, microCDRWriter);
	serializeUnsignedInt(input->magnetometer_errcount, microCDRWriter);
	serializeFloat(input->magnetometer_temp, microCDRWriter);
	serializeFloatArray(input->gyro1_rad_s, 3, microCDRWriter);
	serializeUnsignedInt(input->gyro1_errcount, microCDRWriter);
	serializeFloat(input->gyro1_temp, microCDRWriter);
	serializeFloatArray(input->accelerometer1_m_s2, 3, microCDRWriter);
	serializeUnsignedInt(input->accelerometer1_errcount, microCDRWriter);
	serializeFloat(input->accelerometer1_temp, microCDRWriter);
	serializeFloatArray(input->magnetometer1_ga, 3, microCDRWriter);
	serializeUnsignedInt(input->magnetometer1_errcount, microCDRWriter);
	serializeFloat(input->magnetometer1_temp, microCDRWriter);
	serializeFloatArray(input->gyro2_rad_s, 3, microCDRWriter);
	serializeUnsignedInt(input->gyro2_errcount, microCDRWriter);
	serializeFloat(input->gyro2_temp, microCDRWriter);
	serializeFloatArray(input->accelerometer2_m_s2, 3, microCDRWriter);
	serializeUnsignedInt(input->accelerometer2_errcount, microCDRWriter);
	serializeFloat(input->accelerometer2_temp, microCDRWriter);
	serializeFloatArray(input->magnetometer2_ga, 3, microCDRWriter);
	serializeUnsignedInt(input->magnetometer2_errcount, microCDRWriter);
	serializeFloat(input->magnetometer2_temp, microCDRWriter);
	serializeFloat(input->baro_pres_mbar, microCDRWriter);
	serializeFloat(input->baro_alt_meter, microCDRWriter);
	serializeFloat(input->baro_temp_celcius, microCDRWriter);
	serializeFloat(input->baro1_pres_mbar, microCDRWriter);
	serializeFloat(input->baro1_alt_meter, microCDRWriter);
	serializeFloat(input->baro1_temp_celcius, microCDRWriter);
	serializeFloatArray(input->adc_voltage_v, 10, microCDRWriter);
	serializeFloat(input->mcu_temp_celcius, microCDRWriter);
	serializeFloat(input->differential_pressure_pa, microCDRWriter);
	serializeFloat(input->differential_pressure_filtered_pa, microCDRWriter);
	serializeFloat(input->differential_pressure1_pa, microCDRWriter);
	serializeFloat(input->differential_pressure1_filtered_pa, microCDRWriter);
	serializeShortArray(input->gyro_raw, 3, microCDRWriter);
	serializeShortArray(input->accelerometer_raw, 3, microCDRWriter);
	serializeShort(input->accelerometer_mode, microCDRWriter);
	serializeShortArray(input->magnetometer_raw, 3, microCDRWriter);
	serializeShort(input->magnetometer_mode, microCDRWriter);
	serializeShortArray(input->gyro1_raw, 3, microCDRWriter);
	serializeShortArray(input->accelerometer1_raw, 3, microCDRWriter);
	serializeShortArray(input->magnetometer1_raw, 3, microCDRWriter);
	serializeShortArray(input->gyro2_raw, 3, microCDRWriter);
	serializeShortArray(input->accelerometer2_raw, 3, microCDRWriter);
	serializeShortArray(input->magnetometer2_raw, 3, microCDRWriter);
	serializeUnsignedShortArray(input->adc_mapping, 10, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_hil_sensor(struct hil_sensor_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeUnsignedLong(&output->accelerometer_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->magnetometer_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->gyro1_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->accelerometer1_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->magnetometer1_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->gyro2_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->accelerometer2_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->magnetometer2_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->baro_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->baro1_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->differential_pressure_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->differential_pressure1_timestamp, microCDRReader);
	deserializeFloat(&output->gyro_rad_s[0], microCDRReader);
	deserializeFloat(&output->gyro_rad_s[1], microCDRReader);
	deserializeFloat(&output->gyro_rad_s[2], microCDRReader);
	deserializeUnsignedInt(&output->gyro_errcount, microCDRReader);
	deserializeFloat(&output->gyro_temp, microCDRReader);
	deserializeFloat(&output->accelerometer_m_s2[0], microCDRReader);
	deserializeFloat(&output->accelerometer_m_s2[1], microCDRReader);
	deserializeFloat(&output->accelerometer_m_s2[2], microCDRReader);
	deserializeFloat(&output->accelerometer_range_m_s2, microCDRReader);
	deserializeUnsignedInt(&output->accelerometer_errcount, microCDRReader);
	deserializeFloat(&output->accelerometer_temp, microCDRReader);
	deserializeFloat(&output->magnetometer_ga[0], microCDRReader);
	deserializeFloat(&output->magnetometer_ga[1], microCDRReader);
	deserializeFloat(&output->magnetometer_ga[2], microCDRReader);
	deserializeFloat(&output->magnetometer_range_ga, microCDRReader);
	deserializeFloat(&output->magnetometer_cuttoff_freq_hz, microCDRReader);
	deserializeUnsignedInt(&output->magnetometer_errcount, microCDRReader);
	deserializeFloat(&output->magnetometer_temp, microCDRReader);
	deserializeFloat(&output->gyro1_rad_s[0], microCDRReader);
	deserializeFloat(&output->gyro1_rad_s[1], microCDRReader);
	deserializeFloat(&output->gyro1_rad_s[2], microCDRReader);
	deserializeUnsignedInt(&output->gyro1_errcount, microCDRReader);
	deserializeFloat(&output->gyro1_temp, microCDRReader);
	deserializeFloat(&output->accelerometer1_m_s2[0], microCDRReader);
	deserializeFloat(&output->accelerometer1_m_s2[1], microCDRReader);
	deserializeFloat(&output->accelerometer1_m_s2[2], microCDRReader);
	deserializeUnsignedInt(&output->accelerometer1_errcount, microCDRReader);
	deserializeFloat(&output->accelerometer1_temp, microCDRReader);
	deserializeFloat(&output->magnetometer1_ga[0], microCDRReader);
	deserializeFloat(&output->magnetometer1_ga[1], microCDRReader);
	deserializeFloat(&output->magnetometer1_ga[2], microCDRReader);
	deserializeUnsignedInt(&output->magnetometer1_errcount, microCDRReader);
	deserializeFloat(&output->magnetometer1_temp, microCDRReader);
	deserializeFloat(&output->gyro2_rad_s[0], microCDRReader);
	deserializeFloat(&output->gyro2_rad_s[1], microCDRReader);
	deserializeFloat(&output->gyro2_rad_s[2], microCDRReader);
	deserializeUnsignedInt(&output->gyro2_errcount, microCDRReader);
	deserializeFloat(&output->gyro2_temp, microCDRReader);
	deserializeFloat(&output->accelerometer2_m_s2[0], microCDRReader);
	deserializeFloat(&output->accelerometer2_m_s2[1], microCDRReader);
	deserializeFloat(&output->accelerometer2_m_s2[2], microCDRReader);
	deserializeUnsignedInt(&output->accelerometer2_errcount, microCDRReader);
	deserializeFloat(&output->accelerometer2_temp, microCDRReader);
	deserializeFloat(&output->magnetometer2_ga[0], microCDRReader);
	deserializeFloat(&output->magnetometer2_ga[1], microCDRReader);
	deserializeFloat(&output->magnetometer2_ga[2], microCDRReader);
	deserializeUnsignedInt(&output->magnetometer2_errcount, microCDRReader);
	deserializeFloat(&output->magnetometer2_temp, microCDRReader);
	deserializeFloat(&output->baro_pres_mbar, microCDRReader);
	deserializeFloat(&output->baro_alt_meter, microCDRReader);
	deserializeFloat(&output->baro_temp_celcius, microCDRReader);
	deserializeFloat(&output->baro1_pres_mbar, microCDRReader);
	deserializeFloat(&output->baro1_alt_meter, microCDRReader);
	deserializeFloat(&output->baro1_temp_celcius, microCDRReader);
	deserializeFloat(&output->adc_voltage_v[0], microCDRReader);
	deserializeFloat(&output->adc_voltage_v[1], microCDRReader);
	deserializeFloat(&output->adc_voltage_v[2], microCDRReader);
	deserializeFloat(&output->adc_voltage_v[3], microCDRReader);
	deserializeFloat(&output->adc_voltage_v[4], microCDRReader);
	deserializeFloat(&output->adc_voltage_v[5], microCDRReader);
	deserializeFloat(&output->adc_voltage_v[6], microCDRReader);
	deserializeFloat(&output->adc_voltage_v[7], microCDRReader);
	deserializeFloat(&output->adc_voltage_v[8], microCDRReader);
	deserializeFloat(&output->adc_voltage_v[9], microCDRReader);
	deserializeFloat(&output->mcu_temp_celcius, microCDRReader);
	deserializeFloat(&output->differential_pressure_pa, microCDRReader);
	deserializeFloat(&output->differential_pressure_filtered_pa, microCDRReader);
	deserializeFloat(&output->differential_pressure1_pa, microCDRReader);
	deserializeFloat(&output->differential_pressure1_filtered_pa, microCDRReader);
	deserializeShort(&output->gyro_raw[0], microCDRReader);
	deserializeShort(&output->gyro_raw[1], microCDRReader);
	deserializeShort(&output->gyro_raw[2], microCDRReader);
	deserializeShort(&output->accelerometer_raw[0], microCDRReader);
	deserializeShort(&output->accelerometer_raw[1], microCDRReader);
	deserializeShort(&output->accelerometer_raw[2], microCDRReader);
	deserializeShort(&output->accelerometer_mode, microCDRReader);
	deserializeShort(&output->magnetometer_raw[0], microCDRReader);
	deserializeShort(&output->magnetometer_raw[1], microCDRReader);
	deserializeShort(&output->magnetometer_raw[2], microCDRReader);
	deserializeShort(&output->magnetometer_mode, microCDRReader);
	deserializeShort(&output->gyro1_raw[0], microCDRReader);
	deserializeShort(&output->gyro1_raw[1], microCDRReader);
	deserializeShort(&output->gyro1_raw[2], microCDRReader);
	deserializeShort(&output->accelerometer1_raw[0], microCDRReader);
	deserializeShort(&output->accelerometer1_raw[1], microCDRReader);
	deserializeShort(&output->accelerometer1_raw[2], microCDRReader);
	deserializeShort(&output->magnetometer1_raw[0], microCDRReader);
	deserializeShort(&output->magnetometer1_raw[1], microCDRReader);
	deserializeShort(&output->magnetometer1_raw[2], microCDRReader);
	deserializeShort(&output->gyro2_raw[0], microCDRReader);
	deserializeShort(&output->gyro2_raw[1], microCDRReader);
	deserializeShort(&output->gyro2_raw[2], microCDRReader);
	deserializeShort(&output->accelerometer2_raw[0], microCDRReader);
	deserializeShort(&output->accelerometer2_raw[1], microCDRReader);
	deserializeShort(&output->accelerometer2_raw[2], microCDRReader);
	deserializeShort(&output->magnetometer2_raw[0], microCDRReader);
	deserializeShort(&output->magnetometer2_raw[1], microCDRReader);
	deserializeShort(&output->magnetometer2_raw[2], microCDRReader);
	deserializeUnsignedShort(&output->adc_mapping[0], microCDRReader);
	deserializeUnsignedShort(&output->adc_mapping[1], microCDRReader);
	deserializeUnsignedShort(&output->adc_mapping[2], microCDRReader);
	deserializeUnsignedShort(&output->adc_mapping[3], microCDRReader);
	deserializeUnsignedShort(&output->adc_mapping[4], microCDRReader);
	deserializeUnsignedShort(&output->adc_mapping[5], microCDRReader);
	deserializeUnsignedShort(&output->adc_mapping[6], microCDRReader);
	deserializeUnsignedShort(&output->adc_mapping[7], microCDRReader);
	deserializeUnsignedShort(&output->adc_mapping[8], microCDRReader);
	deserializeUnsignedShort(&output->adc_mapping[9], microCDRReader);

}