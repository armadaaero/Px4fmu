/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/position_setpoint_triplet.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/position_setpoint_triplet.h>

constexpr char __orb_position_setpoint_triplet_fields[] = "uint64_t timestamp;position_setpoint previous;position_setpoint current;position_setpoint next;";

ORB_DEFINE(position_setpoint_triplet, struct position_setpoint_triplet_s, 320,
    __orb_position_setpoint_triplet_fields);



void serialize_position_setpoint_triplet(const struct position_setpoint_triplet_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeDouble(input->previous.lat, microCDRWriter);
	serializeDouble(input->previous.lon, microCDRWriter);
	serializeFloat(input->previous.x, microCDRWriter);
	serializeFloat(input->previous.y, microCDRWriter);
	serializeFloat(input->previous.z, microCDRWriter);
	serializeFloat(input->previous.vx, microCDRWriter);
	serializeFloat(input->previous.vy, microCDRWriter);
	serializeFloat(input->previous.vz, microCDRWriter);
	serializeFloat(input->previous.alt, microCDRWriter);
	serializeFloat(input->previous.yaw, microCDRWriter);
	serializeFloat(input->previous.yawspeed, microCDRWriter);
	serializeFloat(input->previous.loiter_radius, microCDRWriter);
	serializeFloat(input->previous.pitch_min, microCDRWriter);
	serializeFloat(input->previous.a_x, microCDRWriter);
	serializeFloat(input->previous.a_y, microCDRWriter);
	serializeFloat(input->previous.a_z, microCDRWriter);
	serializeFloat(input->previous.acceptance_radius, microCDRWriter);
	serializeFloat(input->previous.cruising_speed, microCDRWriter);
	serializeFloat(input->previous.cruising_throttle, microCDRWriter);
	serializeBool(input->previous.valid, microCDRWriter);
	serializeUnsignedChar(input->previous.type, microCDRWriter);
	serializeBool(input->previous.position_valid, microCDRWriter);
	serializeBool(input->previous.velocity_valid, microCDRWriter);
	serializeUnsignedChar(input->previous.velocity_frame, microCDRWriter);
	serializeBool(input->previous.alt_valid, microCDRWriter);
	serializeBool(input->previous.yaw_valid, microCDRWriter);
	serializeBool(input->previous.disable_mc_yaw_control, microCDRWriter);
	serializeBool(input->previous.yawspeed_valid, microCDRWriter);
	serializeSignedChar(input->previous.loiter_direction, microCDRWriter);
	serializeBool(input->previous.acceleration_valid, microCDRWriter);
	serializeBool(input->previous.acceleration_is_force, microCDRWriter);
	serializeDouble(input->current.lat, microCDRWriter);
	serializeDouble(input->current.lon, microCDRWriter);
	serializeFloat(input->current.x, microCDRWriter);
	serializeFloat(input->current.y, microCDRWriter);
	serializeFloat(input->current.z, microCDRWriter);
	serializeFloat(input->current.vx, microCDRWriter);
	serializeFloat(input->current.vy, microCDRWriter);
	serializeFloat(input->current.vz, microCDRWriter);
	serializeFloat(input->current.alt, microCDRWriter);
	serializeFloat(input->current.yaw, microCDRWriter);
	serializeFloat(input->current.yawspeed, microCDRWriter);
	serializeFloat(input->current.loiter_radius, microCDRWriter);
	serializeFloat(input->current.pitch_min, microCDRWriter);
	serializeFloat(input->current.a_x, microCDRWriter);
	serializeFloat(input->current.a_y, microCDRWriter);
	serializeFloat(input->current.a_z, microCDRWriter);
	serializeFloat(input->current.acceptance_radius, microCDRWriter);
	serializeFloat(input->current.cruising_speed, microCDRWriter);
	serializeFloat(input->current.cruising_throttle, microCDRWriter);
	serializeBool(input->current.valid, microCDRWriter);
	serializeUnsignedChar(input->current.type, microCDRWriter);
	serializeBool(input->current.position_valid, microCDRWriter);
	serializeBool(input->current.velocity_valid, microCDRWriter);
	serializeUnsignedChar(input->current.velocity_frame, microCDRWriter);
	serializeBool(input->current.alt_valid, microCDRWriter);
	serializeBool(input->current.yaw_valid, microCDRWriter);
	serializeBool(input->current.disable_mc_yaw_control, microCDRWriter);
	serializeBool(input->current.yawspeed_valid, microCDRWriter);
	serializeSignedChar(input->current.loiter_direction, microCDRWriter);
	serializeBool(input->current.acceleration_valid, microCDRWriter);
	serializeBool(input->current.acceleration_is_force, microCDRWriter);
	serializeDouble(input->next.lat, microCDRWriter);
	serializeDouble(input->next.lon, microCDRWriter);
	serializeFloat(input->next.x, microCDRWriter);
	serializeFloat(input->next.y, microCDRWriter);
	serializeFloat(input->next.z, microCDRWriter);
	serializeFloat(input->next.vx, microCDRWriter);
	serializeFloat(input->next.vy, microCDRWriter);
	serializeFloat(input->next.vz, microCDRWriter);
	serializeFloat(input->next.alt, microCDRWriter);
	serializeFloat(input->next.yaw, microCDRWriter);
	serializeFloat(input->next.yawspeed, microCDRWriter);
	serializeFloat(input->next.loiter_radius, microCDRWriter);
	serializeFloat(input->next.pitch_min, microCDRWriter);
	serializeFloat(input->next.a_x, microCDRWriter);
	serializeFloat(input->next.a_y, microCDRWriter);
	serializeFloat(input->next.a_z, microCDRWriter);
	serializeFloat(input->next.acceptance_radius, microCDRWriter);
	serializeFloat(input->next.cruising_speed, microCDRWriter);
	serializeFloat(input->next.cruising_throttle, microCDRWriter);
	serializeBool(input->next.valid, microCDRWriter);
	serializeUnsignedChar(input->next.type, microCDRWriter);
	serializeBool(input->next.position_valid, microCDRWriter);
	serializeBool(input->next.velocity_valid, microCDRWriter);
	serializeUnsignedChar(input->next.velocity_frame, microCDRWriter);
	serializeBool(input->next.alt_valid, microCDRWriter);
	serializeBool(input->next.yaw_valid, microCDRWriter);
	serializeBool(input->next.disable_mc_yaw_control, microCDRWriter);
	serializeBool(input->next.yawspeed_valid, microCDRWriter);
	serializeSignedChar(input->next.loiter_direction, microCDRWriter);
	serializeBool(input->next.acceleration_valid, microCDRWriter);
	serializeBool(input->next.acceleration_is_force, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_position_setpoint_triplet(struct position_setpoint_triplet_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeDouble(&output->previous.lat, microCDRReader);
	deserializeDouble(&output->previous.lon, microCDRReader);
	deserializeFloat(&output->previous.x, microCDRReader);
	deserializeFloat(&output->previous.y, microCDRReader);
	deserializeFloat(&output->previous.z, microCDRReader);
	deserializeFloat(&output->previous.vx, microCDRReader);
	deserializeFloat(&output->previous.vy, microCDRReader);
	deserializeFloat(&output->previous.vz, microCDRReader);
	deserializeFloat(&output->previous.alt, microCDRReader);
	deserializeFloat(&output->previous.yaw, microCDRReader);
	deserializeFloat(&output->previous.yawspeed, microCDRReader);
	deserializeFloat(&output->previous.loiter_radius, microCDRReader);
	deserializeFloat(&output->previous.pitch_min, microCDRReader);
	deserializeFloat(&output->previous.a_x, microCDRReader);
	deserializeFloat(&output->previous.a_y, microCDRReader);
	deserializeFloat(&output->previous.a_z, microCDRReader);
	deserializeFloat(&output->previous.acceptance_radius, microCDRReader);
	deserializeFloat(&output->previous.cruising_speed, microCDRReader);
	deserializeFloat(&output->previous.cruising_throttle, microCDRReader);
	deserializeBool(&output->previous.valid, microCDRReader);
	deserializeUnsignedChar(&output->previous.type, microCDRReader);
	deserializeBool(&output->previous.position_valid, microCDRReader);
	deserializeBool(&output->previous.velocity_valid, microCDRReader);
	deserializeUnsignedChar(&output->previous.velocity_frame, microCDRReader);
	deserializeBool(&output->previous.alt_valid, microCDRReader);
	deserializeBool(&output->previous.yaw_valid, microCDRReader);
	deserializeBool(&output->previous.disable_mc_yaw_control, microCDRReader);
	deserializeBool(&output->previous.yawspeed_valid, microCDRReader);
	deserializeSignedChar(&output->previous.loiter_direction, microCDRReader);
	deserializeBool(&output->previous.acceleration_valid, microCDRReader);
	deserializeBool(&output->previous.acceleration_is_force, microCDRReader);
	deserializeDouble(&output->current.lat, microCDRReader);
	deserializeDouble(&output->current.lon, microCDRReader);
	deserializeFloat(&output->current.x, microCDRReader);
	deserializeFloat(&output->current.y, microCDRReader);
	deserializeFloat(&output->current.z, microCDRReader);
	deserializeFloat(&output->current.vx, microCDRReader);
	deserializeFloat(&output->current.vy, microCDRReader);
	deserializeFloat(&output->current.vz, microCDRReader);
	deserializeFloat(&output->current.alt, microCDRReader);
	deserializeFloat(&output->current.yaw, microCDRReader);
	deserializeFloat(&output->current.yawspeed, microCDRReader);
	deserializeFloat(&output->current.loiter_radius, microCDRReader);
	deserializeFloat(&output->current.pitch_min, microCDRReader);
	deserializeFloat(&output->current.a_x, microCDRReader);
	deserializeFloat(&output->current.a_y, microCDRReader);
	deserializeFloat(&output->current.a_z, microCDRReader);
	deserializeFloat(&output->current.acceptance_radius, microCDRReader);
	deserializeFloat(&output->current.cruising_speed, microCDRReader);
	deserializeFloat(&output->current.cruising_throttle, microCDRReader);
	deserializeBool(&output->current.valid, microCDRReader);
	deserializeUnsignedChar(&output->current.type, microCDRReader);
	deserializeBool(&output->current.position_valid, microCDRReader);
	deserializeBool(&output->current.velocity_valid, microCDRReader);
	deserializeUnsignedChar(&output->current.velocity_frame, microCDRReader);
	deserializeBool(&output->current.alt_valid, microCDRReader);
	deserializeBool(&output->current.yaw_valid, microCDRReader);
	deserializeBool(&output->current.disable_mc_yaw_control, microCDRReader);
	deserializeBool(&output->current.yawspeed_valid, microCDRReader);
	deserializeSignedChar(&output->current.loiter_direction, microCDRReader);
	deserializeBool(&output->current.acceleration_valid, microCDRReader);
	deserializeBool(&output->current.acceleration_is_force, microCDRReader);
	deserializeDouble(&output->next.lat, microCDRReader);
	deserializeDouble(&output->next.lon, microCDRReader);
	deserializeFloat(&output->next.x, microCDRReader);
	deserializeFloat(&output->next.y, microCDRReader);
	deserializeFloat(&output->next.z, microCDRReader);
	deserializeFloat(&output->next.vx, microCDRReader);
	deserializeFloat(&output->next.vy, microCDRReader);
	deserializeFloat(&output->next.vz, microCDRReader);
	deserializeFloat(&output->next.alt, microCDRReader);
	deserializeFloat(&output->next.yaw, microCDRReader);
	deserializeFloat(&output->next.yawspeed, microCDRReader);
	deserializeFloat(&output->next.loiter_radius, microCDRReader);
	deserializeFloat(&output->next.pitch_min, microCDRReader);
	deserializeFloat(&output->next.a_x, microCDRReader);
	deserializeFloat(&output->next.a_y, microCDRReader);
	deserializeFloat(&output->next.a_z, microCDRReader);
	deserializeFloat(&output->next.acceptance_radius, microCDRReader);
	deserializeFloat(&output->next.cruising_speed, microCDRReader);
	deserializeFloat(&output->next.cruising_throttle, microCDRReader);
	deserializeBool(&output->next.valid, microCDRReader);
	deserializeUnsignedChar(&output->next.type, microCDRReader);
	deserializeBool(&output->next.position_valid, microCDRReader);
	deserializeBool(&output->next.velocity_valid, microCDRReader);
	deserializeUnsignedChar(&output->next.velocity_frame, microCDRReader);
	deserializeBool(&output->next.alt_valid, microCDRReader);
	deserializeBool(&output->next.yaw_valid, microCDRReader);
	deserializeBool(&output->next.disable_mc_yaw_control, microCDRReader);
	deserializeBool(&output->next.yawspeed_valid, microCDRReader);
	deserializeSignedChar(&output->next.loiter_direction, microCDRReader);
	deserializeBool(&output->next.acceleration_valid, microCDRReader);
	deserializeBool(&output->next.acceleration_is_force, microCDRReader);

}