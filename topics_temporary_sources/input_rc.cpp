/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/input_rc.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/input_rc.h>

constexpr char __orb_input_rc_fields[] = "uint64_t timestamp;uint64_t timestamp_last_signal;uint32_t channel_count;int32_t rssi;uint16_t rc_lost_frame_count;uint16_t rc_total_frame_count;uint16_t rc_ppm_frame_length;uint16_t[18] values;bool rc_failsafe;bool rc_lost;uint8_t input_source;uint8_t[3] _padding0;";

ORB_DEFINE(input_rc, struct input_rc_s, 69,
    __orb_input_rc_fields);



void serialize_input_rc(const struct input_rc_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeUnsignedLong(input->timestamp_last_signal, microCDRWriter);
	serializeUnsignedInt(input->channel_count, microCDRWriter);
	serializeInt(input->rssi, microCDRWriter);
	serializeUnsignedShort(input->rc_lost_frame_count, microCDRWriter);
	serializeUnsignedShort(input->rc_total_frame_count, microCDRWriter);
	serializeUnsignedShort(input->rc_ppm_frame_length, microCDRWriter);
	serializeUnsignedShortArray(input->values, 18, microCDRWriter);
	serializeBool(input->rc_failsafe, microCDRWriter);
	serializeBool(input->rc_lost, microCDRWriter);
	serializeUnsignedChar(input->input_source, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_input_rc(struct input_rc_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeUnsignedLong(&output->timestamp_last_signal, microCDRReader);
	deserializeUnsignedInt(&output->channel_count, microCDRReader);
	deserializeInt(&output->rssi, microCDRReader);
	deserializeUnsignedShort(&output->rc_lost_frame_count, microCDRReader);
	deserializeUnsignedShort(&output->rc_total_frame_count, microCDRReader);
	deserializeUnsignedShort(&output->rc_ppm_frame_length, microCDRReader);
	deserializeUnsignedShort(&output->values[0], microCDRReader);
	deserializeUnsignedShort(&output->values[1], microCDRReader);
	deserializeUnsignedShort(&output->values[2], microCDRReader);
	deserializeUnsignedShort(&output->values[3], microCDRReader);
	deserializeUnsignedShort(&output->values[4], microCDRReader);
	deserializeUnsignedShort(&output->values[5], microCDRReader);
	deserializeUnsignedShort(&output->values[6], microCDRReader);
	deserializeUnsignedShort(&output->values[7], microCDRReader);
	deserializeUnsignedShort(&output->values[8], microCDRReader);
	deserializeUnsignedShort(&output->values[9], microCDRReader);
	deserializeUnsignedShort(&output->values[10], microCDRReader);
	deserializeUnsignedShort(&output->values[11], microCDRReader);
	deserializeUnsignedShort(&output->values[12], microCDRReader);
	deserializeUnsignedShort(&output->values[13], microCDRReader);
	deserializeUnsignedShort(&output->values[14], microCDRReader);
	deserializeUnsignedShort(&output->values[15], microCDRReader);
	deserializeUnsignedShort(&output->values[16], microCDRReader);
	deserializeUnsignedShort(&output->values[17], microCDRReader);
	deserializeBool(&output->rc_failsafe, microCDRReader);
	deserializeBool(&output->rc_lost, microCDRReader);
	deserializeUnsignedChar(&output->input_source, microCDRReader);

}