/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/rc_parameter_map.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/rc_parameter_map.h>

constexpr char __orb_rc_parameter_map_fields[] = "uint64_t timestamp;int32_t[3] param_index;float[3] scale;float[3] value0;float[3] value_min;float[3] value_max;bool[3] valid;char[51] param_id;uint8_t[6] _padding0;";

ORB_DEFINE(rc_parameter_map, struct rc_parameter_map_s, 122,
    __orb_rc_parameter_map_fields);



void serialize_rc_parameter_map(const struct rc_parameter_map_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeIntArray(input->param_index, 3, microCDRWriter);
	serializeFloatArray(input->scale, 3, microCDRWriter);
	serializeFloatArray(input->value0, 3, microCDRWriter);
	serializeFloatArray(input->value_min, 3, microCDRWriter);
	serializeFloatArray(input->value_max, 3, microCDRWriter);
	serializeBoolArray(input->valid, 3, microCDRWriter);
	serializeCharArray(input->param_id, 51, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_rc_parameter_map(struct rc_parameter_map_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeInt(&output->param_index[0], microCDRReader);
	deserializeInt(&output->param_index[1], microCDRReader);
	deserializeInt(&output->param_index[2], microCDRReader);
	deserializeFloat(&output->scale[0], microCDRReader);
	deserializeFloat(&output->scale[1], microCDRReader);
	deserializeFloat(&output->scale[2], microCDRReader);
	deserializeFloat(&output->value0[0], microCDRReader);
	deserializeFloat(&output->value0[1], microCDRReader);
	deserializeFloat(&output->value0[2], microCDRReader);
	deserializeFloat(&output->value_min[0], microCDRReader);
	deserializeFloat(&output->value_min[1], microCDRReader);
	deserializeFloat(&output->value_min[2], microCDRReader);
	deserializeFloat(&output->value_max[0], microCDRReader);
	deserializeFloat(&output->value_max[1], microCDRReader);
	deserializeFloat(&output->value_max[2], microCDRReader);
	deserializeBool(&output->valid[0], microCDRReader);
	deserializeBool(&output->valid[1], microCDRReader);
	deserializeBool(&output->valid[2], microCDRReader);
	deserializeChar(&output->param_id[0], microCDRReader);
	deserializeChar(&output->param_id[1], microCDRReader);
	deserializeChar(&output->param_id[2], microCDRReader);
	deserializeChar(&output->param_id[3], microCDRReader);
	deserializeChar(&output->param_id[4], microCDRReader);
	deserializeChar(&output->param_id[5], microCDRReader);
	deserializeChar(&output->param_id[6], microCDRReader);
	deserializeChar(&output->param_id[7], microCDRReader);
	deserializeChar(&output->param_id[8], microCDRReader);
	deserializeChar(&output->param_id[9], microCDRReader);
	deserializeChar(&output->param_id[10], microCDRReader);
	deserializeChar(&output->param_id[11], microCDRReader);
	deserializeChar(&output->param_id[12], microCDRReader);
	deserializeChar(&output->param_id[13], microCDRReader);
	deserializeChar(&output->param_id[14], microCDRReader);
	deserializeChar(&output->param_id[15], microCDRReader);
	deserializeChar(&output->param_id[16], microCDRReader);
	deserializeChar(&output->param_id[17], microCDRReader);
	deserializeChar(&output->param_id[18], microCDRReader);
	deserializeChar(&output->param_id[19], microCDRReader);
	deserializeChar(&output->param_id[20], microCDRReader);
	deserializeChar(&output->param_id[21], microCDRReader);
	deserializeChar(&output->param_id[22], microCDRReader);
	deserializeChar(&output->param_id[23], microCDRReader);
	deserializeChar(&output->param_id[24], microCDRReader);
	deserializeChar(&output->param_id[25], microCDRReader);
	deserializeChar(&output->param_id[26], microCDRReader);
	deserializeChar(&output->param_id[27], microCDRReader);
	deserializeChar(&output->param_id[28], microCDRReader);
	deserializeChar(&output->param_id[29], microCDRReader);
	deserializeChar(&output->param_id[30], microCDRReader);
	deserializeChar(&output->param_id[31], microCDRReader);
	deserializeChar(&output->param_id[32], microCDRReader);
	deserializeChar(&output->param_id[33], microCDRReader);
	deserializeChar(&output->param_id[34], microCDRReader);
	deserializeChar(&output->param_id[35], microCDRReader);
	deserializeChar(&output->param_id[36], microCDRReader);
	deserializeChar(&output->param_id[37], microCDRReader);
	deserializeChar(&output->param_id[38], microCDRReader);
	deserializeChar(&output->param_id[39], microCDRReader);
	deserializeChar(&output->param_id[40], microCDRReader);
	deserializeChar(&output->param_id[41], microCDRReader);
	deserializeChar(&output->param_id[42], microCDRReader);
	deserializeChar(&output->param_id[43], microCDRReader);
	deserializeChar(&output->param_id[44], microCDRReader);
	deserializeChar(&output->param_id[45], microCDRReader);
	deserializeChar(&output->param_id[46], microCDRReader);
	deserializeChar(&output->param_id[47], microCDRReader);
	deserializeChar(&output->param_id[48], microCDRReader);
	deserializeChar(&output->param_id[49], microCDRReader);
	deserializeChar(&output->param_id[50], microCDRReader);

}