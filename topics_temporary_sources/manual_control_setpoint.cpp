/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/manual_control_setpoint.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/manual_control_setpoint.h>

constexpr char __orb_manual_control_setpoint_fields[] = "uint64_t timestamp;float x;float y;float z;float r;float flaps;float aux1;float aux2;float aux3;float aux4;float aux5;uint8_t mode_switch;uint8_t return_switch;uint8_t rattitude_switch;uint8_t posctl_switch;uint8_t loiter_switch;uint8_t acro_switch;uint8_t offboard_switch;uint8_t kill_switch;uint8_t arm_switch;uint8_t transition_switch;uint8_t gear_switch;int8_t mode_slot;uint8_t data_source;uint8_t stab_switch;uint8_t man_switch;uint8_t[1] _padding0;";

ORB_DEFINE(manual_control_setpoint, struct manual_control_setpoint_s, 63,
    __orb_manual_control_setpoint_fields);



void serialize_manual_control_setpoint(const struct manual_control_setpoint_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeFloat(input->x, microCDRWriter);
	serializeFloat(input->y, microCDRWriter);
	serializeFloat(input->z, microCDRWriter);
	serializeFloat(input->r, microCDRWriter);
	serializeFloat(input->flaps, microCDRWriter);
	serializeFloat(input->aux1, microCDRWriter);
	serializeFloat(input->aux2, microCDRWriter);
	serializeFloat(input->aux3, microCDRWriter);
	serializeFloat(input->aux4, microCDRWriter);
	serializeFloat(input->aux5, microCDRWriter);
	serializeUnsignedChar(input->mode_switch, microCDRWriter);
	serializeUnsignedChar(input->return_switch, microCDRWriter);
	serializeUnsignedChar(input->rattitude_switch, microCDRWriter);
	serializeUnsignedChar(input->posctl_switch, microCDRWriter);
	serializeUnsignedChar(input->loiter_switch, microCDRWriter);
	serializeUnsignedChar(input->acro_switch, microCDRWriter);
	serializeUnsignedChar(input->offboard_switch, microCDRWriter);
	serializeUnsignedChar(input->kill_switch, microCDRWriter);
	serializeUnsignedChar(input->arm_switch, microCDRWriter);
	serializeUnsignedChar(input->transition_switch, microCDRWriter);
	serializeUnsignedChar(input->gear_switch, microCDRWriter);
	serializeSignedChar(input->mode_slot, microCDRWriter);
	serializeUnsignedChar(input->data_source, microCDRWriter);
	serializeUnsignedChar(input->stab_switch, microCDRWriter);
	serializeUnsignedChar(input->man_switch, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_manual_control_setpoint(struct manual_control_setpoint_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeFloat(&output->x, microCDRReader);
	deserializeFloat(&output->y, microCDRReader);
	deserializeFloat(&output->z, microCDRReader);
	deserializeFloat(&output->r, microCDRReader);
	deserializeFloat(&output->flaps, microCDRReader);
	deserializeFloat(&output->aux1, microCDRReader);
	deserializeFloat(&output->aux2, microCDRReader);
	deserializeFloat(&output->aux3, microCDRReader);
	deserializeFloat(&output->aux4, microCDRReader);
	deserializeFloat(&output->aux5, microCDRReader);
	deserializeUnsignedChar(&output->mode_switch, microCDRReader);
	deserializeUnsignedChar(&output->return_switch, microCDRReader);
	deserializeUnsignedChar(&output->rattitude_switch, microCDRReader);
	deserializeUnsignedChar(&output->posctl_switch, microCDRReader);
	deserializeUnsignedChar(&output->loiter_switch, microCDRReader);
	deserializeUnsignedChar(&output->acro_switch, microCDRReader);
	deserializeUnsignedChar(&output->offboard_switch, microCDRReader);
	deserializeUnsignedChar(&output->kill_switch, microCDRReader);
	deserializeUnsignedChar(&output->arm_switch, microCDRReader);
	deserializeUnsignedChar(&output->transition_switch, microCDRReader);
	deserializeUnsignedChar(&output->gear_switch, microCDRReader);
	deserializeSignedChar(&output->mode_slot, microCDRReader);
	deserializeUnsignedChar(&output->data_source, microCDRReader);
	deserializeUnsignedChar(&output->stab_switch, microCDRReader);
	deserializeUnsignedChar(&output->man_switch, microCDRReader);

}