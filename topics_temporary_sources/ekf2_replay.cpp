/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/ekf2_replay.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/ekf2_replay.h>

constexpr char __orb_ekf2_replay_fields[] = "uint64_t timestamp;uint64_t magnetometer_timestamp;uint64_t baro_timestamp;uint64_t rng_timestamp;uint64_t flow_timestamp;uint64_t asp_timestamp;uint64_t ev_timestamp;uint64_t time_usec;uint32_t gyro_integral_dt;uint32_t accelerometer_integral_dt;float[3] gyro_rad;float[3] accelerometer_m_s2;float[3] magnetometer_ga;float baro_alt_meter;int32_t lat;int32_t lon;int32_t alt;float eph;float epv;float sacc;float vel_m_s;float vel_n_m_s;float vel_e_m_s;float vel_d_m_s;float range_to_ground;float[2] flow_pixel_integral;float[2] flow_gyro_integral;uint32_t flow_time_integral;float indicated_airspeed_m_s;float true_airspeed_m_s;float[3] pos_ev;float[4] quat_ev;float pos_err;float ang_err;uint8_t fix_type;uint8_t nsats;bool vel_ned_valid;uint8_t flow_quality;";

ORB_DEFINE(ekf2_replay, struct ekf2_replay_s, 224,
    __orb_ekf2_replay_fields);



void serialize_ekf2_replay(const struct ekf2_replay_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeUnsignedLong(input->magnetometer_timestamp, microCDRWriter);
	serializeUnsignedLong(input->baro_timestamp, microCDRWriter);
	serializeUnsignedLong(input->rng_timestamp, microCDRWriter);
	serializeUnsignedLong(input->flow_timestamp, microCDRWriter);
	serializeUnsignedLong(input->asp_timestamp, microCDRWriter);
	serializeUnsignedLong(input->ev_timestamp, microCDRWriter);
	serializeUnsignedLong(input->time_usec, microCDRWriter);
	serializeUnsignedInt(input->gyro_integral_dt, microCDRWriter);
	serializeUnsignedInt(input->accelerometer_integral_dt, microCDRWriter);
	serializeFloatArray(input->gyro_rad, 3, microCDRWriter);
	serializeFloatArray(input->accelerometer_m_s2, 3, microCDRWriter);
	serializeFloatArray(input->magnetometer_ga, 3, microCDRWriter);
	serializeFloat(input->baro_alt_meter, microCDRWriter);
	serializeInt(input->lat, microCDRWriter);
	serializeInt(input->lon, microCDRWriter);
	serializeInt(input->alt, microCDRWriter);
	serializeFloat(input->eph, microCDRWriter);
	serializeFloat(input->epv, microCDRWriter);
	serializeFloat(input->sacc, microCDRWriter);
	serializeFloat(input->vel_m_s, microCDRWriter);
	serializeFloat(input->vel_n_m_s, microCDRWriter);
	serializeFloat(input->vel_e_m_s, microCDRWriter);
	serializeFloat(input->vel_d_m_s, microCDRWriter);
	serializeFloat(input->range_to_ground, microCDRWriter);
	serializeFloatArray(input->flow_pixel_integral, 2, microCDRWriter);
	serializeFloatArray(input->flow_gyro_integral, 2, microCDRWriter);
	serializeUnsignedInt(input->flow_time_integral, microCDRWriter);
	serializeFloat(input->indicated_airspeed_m_s, microCDRWriter);
	serializeFloat(input->true_airspeed_m_s, microCDRWriter);
	serializeFloatArray(input->pos_ev, 3, microCDRWriter);
	serializeFloatArray(input->quat_ev, 4, microCDRWriter);
	serializeFloat(input->pos_err, microCDRWriter);
	serializeFloat(input->ang_err, microCDRWriter);
	serializeUnsignedChar(input->fix_type, microCDRWriter);
	serializeUnsignedChar(input->nsats, microCDRWriter);
	serializeBool(input->vel_ned_valid, microCDRWriter);
	serializeUnsignedChar(input->flow_quality, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_ekf2_replay(struct ekf2_replay_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeUnsignedLong(&output->magnetometer_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->baro_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->rng_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->flow_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->asp_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->ev_timestamp, microCDRReader);
	deserializeUnsignedLong(&output->time_usec, microCDRReader);
	deserializeUnsignedInt(&output->gyro_integral_dt, microCDRReader);
	deserializeUnsignedInt(&output->accelerometer_integral_dt, microCDRReader);
	deserializeFloat(&output->gyro_rad[0], microCDRReader);
	deserializeFloat(&output->gyro_rad[1], microCDRReader);
	deserializeFloat(&output->gyro_rad[2], microCDRReader);
	deserializeFloat(&output->accelerometer_m_s2[0], microCDRReader);
	deserializeFloat(&output->accelerometer_m_s2[1], microCDRReader);
	deserializeFloat(&output->accelerometer_m_s2[2], microCDRReader);
	deserializeFloat(&output->magnetometer_ga[0], microCDRReader);
	deserializeFloat(&output->magnetometer_ga[1], microCDRReader);
	deserializeFloat(&output->magnetometer_ga[2], microCDRReader);
	deserializeFloat(&output->baro_alt_meter, microCDRReader);
	deserializeInt(&output->lat, microCDRReader);
	deserializeInt(&output->lon, microCDRReader);
	deserializeInt(&output->alt, microCDRReader);
	deserializeFloat(&output->eph, microCDRReader);
	deserializeFloat(&output->epv, microCDRReader);
	deserializeFloat(&output->sacc, microCDRReader);
	deserializeFloat(&output->vel_m_s, microCDRReader);
	deserializeFloat(&output->vel_n_m_s, microCDRReader);
	deserializeFloat(&output->vel_e_m_s, microCDRReader);
	deserializeFloat(&output->vel_d_m_s, microCDRReader);
	deserializeFloat(&output->range_to_ground, microCDRReader);
	deserializeFloat(&output->flow_pixel_integral[0], microCDRReader);
	deserializeFloat(&output->flow_pixel_integral[1], microCDRReader);
	deserializeFloat(&output->flow_gyro_integral[0], microCDRReader);
	deserializeFloat(&output->flow_gyro_integral[1], microCDRReader);
	deserializeUnsignedInt(&output->flow_time_integral, microCDRReader);
	deserializeFloat(&output->indicated_airspeed_m_s, microCDRReader);
	deserializeFloat(&output->true_airspeed_m_s, microCDRReader);
	deserializeFloat(&output->pos_ev[0], microCDRReader);
	deserializeFloat(&output->pos_ev[1], microCDRReader);
	deserializeFloat(&output->pos_ev[2], microCDRReader);
	deserializeFloat(&output->quat_ev[0], microCDRReader);
	deserializeFloat(&output->quat_ev[1], microCDRReader);
	deserializeFloat(&output->quat_ev[2], microCDRReader);
	deserializeFloat(&output->quat_ev[3], microCDRReader);
	deserializeFloat(&output->pos_err, microCDRReader);
	deserializeFloat(&output->ang_err, microCDRReader);
	deserializeUnsignedChar(&output->fix_type, microCDRReader);
	deserializeUnsignedChar(&output->nsats, microCDRReader);
	deserializeBool(&output->vel_ned_valid, microCDRReader);
	deserializeUnsignedChar(&output->flow_quality, microCDRReader);

}