/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/qshell_req.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/qshell_req.h>

constexpr char __orb_qshell_req_fields[] = "uint64_t timestamp;uint64_t strlen;int32_t[100] string;";

ORB_DEFINE(qshell_req, struct qshell_req_s, 416,
    __orb_qshell_req_fields);



void serialize_qshell_req(const struct qshell_req_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeUnsignedLong(input->strlen, microCDRWriter);
	serializeIntArray(input->string, 100, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_qshell_req(struct qshell_req_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeUnsignedLong(&output->strlen, microCDRReader);
	deserializeInt(&output->string[0], microCDRReader);
	deserializeInt(&output->string[1], microCDRReader);
	deserializeInt(&output->string[2], microCDRReader);
	deserializeInt(&output->string[3], microCDRReader);
	deserializeInt(&output->string[4], microCDRReader);
	deserializeInt(&output->string[5], microCDRReader);
	deserializeInt(&output->string[6], microCDRReader);
	deserializeInt(&output->string[7], microCDRReader);
	deserializeInt(&output->string[8], microCDRReader);
	deserializeInt(&output->string[9], microCDRReader);
	deserializeInt(&output->string[10], microCDRReader);
	deserializeInt(&output->string[11], microCDRReader);
	deserializeInt(&output->string[12], microCDRReader);
	deserializeInt(&output->string[13], microCDRReader);
	deserializeInt(&output->string[14], microCDRReader);
	deserializeInt(&output->string[15], microCDRReader);
	deserializeInt(&output->string[16], microCDRReader);
	deserializeInt(&output->string[17], microCDRReader);
	deserializeInt(&output->string[18], microCDRReader);
	deserializeInt(&output->string[19], microCDRReader);
	deserializeInt(&output->string[20], microCDRReader);
	deserializeInt(&output->string[21], microCDRReader);
	deserializeInt(&output->string[22], microCDRReader);
	deserializeInt(&output->string[23], microCDRReader);
	deserializeInt(&output->string[24], microCDRReader);
	deserializeInt(&output->string[25], microCDRReader);
	deserializeInt(&output->string[26], microCDRReader);
	deserializeInt(&output->string[27], microCDRReader);
	deserializeInt(&output->string[28], microCDRReader);
	deserializeInt(&output->string[29], microCDRReader);
	deserializeInt(&output->string[30], microCDRReader);
	deserializeInt(&output->string[31], microCDRReader);
	deserializeInt(&output->string[32], microCDRReader);
	deserializeInt(&output->string[33], microCDRReader);
	deserializeInt(&output->string[34], microCDRReader);
	deserializeInt(&output->string[35], microCDRReader);
	deserializeInt(&output->string[36], microCDRReader);
	deserializeInt(&output->string[37], microCDRReader);
	deserializeInt(&output->string[38], microCDRReader);
	deserializeInt(&output->string[39], microCDRReader);
	deserializeInt(&output->string[40], microCDRReader);
	deserializeInt(&output->string[41], microCDRReader);
	deserializeInt(&output->string[42], microCDRReader);
	deserializeInt(&output->string[43], microCDRReader);
	deserializeInt(&output->string[44], microCDRReader);
	deserializeInt(&output->string[45], microCDRReader);
	deserializeInt(&output->string[46], microCDRReader);
	deserializeInt(&output->string[47], microCDRReader);
	deserializeInt(&output->string[48], microCDRReader);
	deserializeInt(&output->string[49], microCDRReader);
	deserializeInt(&output->string[50], microCDRReader);
	deserializeInt(&output->string[51], microCDRReader);
	deserializeInt(&output->string[52], microCDRReader);
	deserializeInt(&output->string[53], microCDRReader);
	deserializeInt(&output->string[54], microCDRReader);
	deserializeInt(&output->string[55], microCDRReader);
	deserializeInt(&output->string[56], microCDRReader);
	deserializeInt(&output->string[57], microCDRReader);
	deserializeInt(&output->string[58], microCDRReader);
	deserializeInt(&output->string[59], microCDRReader);
	deserializeInt(&output->string[60], microCDRReader);
	deserializeInt(&output->string[61], microCDRReader);
	deserializeInt(&output->string[62], microCDRReader);
	deserializeInt(&output->string[63], microCDRReader);
	deserializeInt(&output->string[64], microCDRReader);
	deserializeInt(&output->string[65], microCDRReader);
	deserializeInt(&output->string[66], microCDRReader);
	deserializeInt(&output->string[67], microCDRReader);
	deserializeInt(&output->string[68], microCDRReader);
	deserializeInt(&output->string[69], microCDRReader);
	deserializeInt(&output->string[70], microCDRReader);
	deserializeInt(&output->string[71], microCDRReader);
	deserializeInt(&output->string[72], microCDRReader);
	deserializeInt(&output->string[73], microCDRReader);
	deserializeInt(&output->string[74], microCDRReader);
	deserializeInt(&output->string[75], microCDRReader);
	deserializeInt(&output->string[76], microCDRReader);
	deserializeInt(&output->string[77], microCDRReader);
	deserializeInt(&output->string[78], microCDRReader);
	deserializeInt(&output->string[79], microCDRReader);
	deserializeInt(&output->string[80], microCDRReader);
	deserializeInt(&output->string[81], microCDRReader);
	deserializeInt(&output->string[82], microCDRReader);
	deserializeInt(&output->string[83], microCDRReader);
	deserializeInt(&output->string[84], microCDRReader);
	deserializeInt(&output->string[85], microCDRReader);
	deserializeInt(&output->string[86], microCDRReader);
	deserializeInt(&output->string[87], microCDRReader);
	deserializeInt(&output->string[88], microCDRReader);
	deserializeInt(&output->string[89], microCDRReader);
	deserializeInt(&output->string[90], microCDRReader);
	deserializeInt(&output->string[91], microCDRReader);
	deserializeInt(&output->string[92], microCDRReader);
	deserializeInt(&output->string[93], microCDRReader);
	deserializeInt(&output->string[94], microCDRReader);
	deserializeInt(&output->string[95], microCDRReader);
	deserializeInt(&output->string[96], microCDRReader);
	deserializeInt(&output->string[97], microCDRReader);
	deserializeInt(&output->string[98], microCDRReader);
	deserializeInt(&output->string[99], microCDRReader);

}