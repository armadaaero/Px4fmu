/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/camera_capture.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/camera_capture.h>

constexpr char __orb_camera_capture_fields[] = "uint64_t timestamp;uint64_t timestamp_utc;double lat;double lon;uint32_t seq;float alt;float ground_distance;float[4] q;int8_t result;uint8_t[3] _padding0;";

ORB_DEFINE(camera_capture, struct camera_capture_s, 61,
    __orb_camera_capture_fields);



void serialize_camera_capture(const struct camera_capture_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeUnsignedLong(input->timestamp_utc, microCDRWriter);
	serializeDouble(input->lat, microCDRWriter);
	serializeDouble(input->lon, microCDRWriter);
	serializeUnsignedInt(input->seq, microCDRWriter);
	serializeFloat(input->alt, microCDRWriter);
	serializeFloat(input->ground_distance, microCDRWriter);
	serializeFloatArray(input->q, 4, microCDRWriter);
	serializeSignedChar(input->result, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_camera_capture(struct camera_capture_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeUnsignedLong(&output->timestamp_utc, microCDRReader);
	deserializeDouble(&output->lat, microCDRReader);
	deserializeDouble(&output->lon, microCDRReader);
	deserializeUnsignedInt(&output->seq, microCDRReader);
	deserializeFloat(&output->alt, microCDRReader);
	deserializeFloat(&output->ground_distance, microCDRReader);
	deserializeFloat(&output->q[0], microCDRReader);
	deserializeFloat(&output->q[1], microCDRReader);
	deserializeFloat(&output->q[2], microCDRReader);
	deserializeFloat(&output->q[3], microCDRReader);
	deserializeSignedChar(&output->result, microCDRReader);

}