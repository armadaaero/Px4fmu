/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/vehicle_gps_position.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/vehicle_gps_position.h>

constexpr char __orb_vehicle_gps_position_fields[] = "uint64_t timestamp;uint64_t time_utc_usec;int32_t lat;int32_t lon;int32_t alt;int32_t alt_ellipsoid;float s_variance_m_s;float c_variance_rad;float eph;float epv;float hdop;float vdop;int32_t noise_per_ms;int32_t jamming_indicator;float vel_m_s;float vel_n_m_s;float vel_e_m_s;float vel_d_m_s;float cog_rad;int32_t timestamp_time_relative;uint8_t fix_type;bool vel_ned_valid;uint8_t satellites_used;uint8_t[5] _padding0;";

ORB_DEFINE(vehicle_gps_position, struct vehicle_gps_position_s, 91,
    __orb_vehicle_gps_position_fields);



void serialize_vehicle_gps_position(const struct vehicle_gps_position_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeUnsignedLong(input->time_utc_usec, microCDRWriter);
	serializeInt(input->lat, microCDRWriter);
	serializeInt(input->lon, microCDRWriter);
	serializeInt(input->alt, microCDRWriter);
	serializeInt(input->alt_ellipsoid, microCDRWriter);
	serializeFloat(input->s_variance_m_s, microCDRWriter);
	serializeFloat(input->c_variance_rad, microCDRWriter);
	serializeFloat(input->eph, microCDRWriter);
	serializeFloat(input->epv, microCDRWriter);
	serializeFloat(input->hdop, microCDRWriter);
	serializeFloat(input->vdop, microCDRWriter);
	serializeInt(input->noise_per_ms, microCDRWriter);
	serializeInt(input->jamming_indicator, microCDRWriter);
	serializeFloat(input->vel_m_s, microCDRWriter);
	serializeFloat(input->vel_n_m_s, microCDRWriter);
	serializeFloat(input->vel_e_m_s, microCDRWriter);
	serializeFloat(input->vel_d_m_s, microCDRWriter);
	serializeFloat(input->cog_rad, microCDRWriter);
	serializeInt(input->timestamp_time_relative, microCDRWriter);
	serializeUnsignedChar(input->fix_type, microCDRWriter);
	serializeBool(input->vel_ned_valid, microCDRWriter);
	serializeUnsignedChar(input->satellites_used, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_vehicle_gps_position(struct vehicle_gps_position_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeUnsignedLong(&output->time_utc_usec, microCDRReader);
	deserializeInt(&output->lat, microCDRReader);
	deserializeInt(&output->lon, microCDRReader);
	deserializeInt(&output->alt, microCDRReader);
	deserializeInt(&output->alt_ellipsoid, microCDRReader);
	deserializeFloat(&output->s_variance_m_s, microCDRReader);
	deserializeFloat(&output->c_variance_rad, microCDRReader);
	deserializeFloat(&output->eph, microCDRReader);
	deserializeFloat(&output->epv, microCDRReader);
	deserializeFloat(&output->hdop, microCDRReader);
	deserializeFloat(&output->vdop, microCDRReader);
	deserializeInt(&output->noise_per_ms, microCDRReader);
	deserializeInt(&output->jamming_indicator, microCDRReader);
	deserializeFloat(&output->vel_m_s, microCDRReader);
	deserializeFloat(&output->vel_n_m_s, microCDRReader);
	deserializeFloat(&output->vel_e_m_s, microCDRReader);
	deserializeFloat(&output->vel_d_m_s, microCDRReader);
	deserializeFloat(&output->cog_rad, microCDRReader);
	deserializeInt(&output->timestamp_time_relative, microCDRReader);
	deserializeUnsignedChar(&output->fix_type, microCDRReader);
	deserializeBool(&output->vel_ned_valid, microCDRReader);
	deserializeUnsignedChar(&output->satellites_used, microCDRReader);

}