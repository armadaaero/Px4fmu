/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/gps_dump.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/gps_dump.h>

constexpr char __orb_gps_dump_fields[] = "uint64_t timestamp;uint8_t len;uint8_t[79] data;";

ORB_DEFINE(gps_dump, struct gps_dump_s, 88,
    __orb_gps_dump_fields);



void serialize_gps_dump(const struct gps_dump_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeUnsignedChar(input->len, microCDRWriter);
	serializeUnsignedCharArray(input->data, 79, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_gps_dump(struct gps_dump_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeUnsignedChar(&output->len, microCDRReader);
	deserializeUnsignedChar(&output->data[0], microCDRReader);
	deserializeUnsignedChar(&output->data[1], microCDRReader);
	deserializeUnsignedChar(&output->data[2], microCDRReader);
	deserializeUnsignedChar(&output->data[3], microCDRReader);
	deserializeUnsignedChar(&output->data[4], microCDRReader);
	deserializeUnsignedChar(&output->data[5], microCDRReader);
	deserializeUnsignedChar(&output->data[6], microCDRReader);
	deserializeUnsignedChar(&output->data[7], microCDRReader);
	deserializeUnsignedChar(&output->data[8], microCDRReader);
	deserializeUnsignedChar(&output->data[9], microCDRReader);
	deserializeUnsignedChar(&output->data[10], microCDRReader);
	deserializeUnsignedChar(&output->data[11], microCDRReader);
	deserializeUnsignedChar(&output->data[12], microCDRReader);
	deserializeUnsignedChar(&output->data[13], microCDRReader);
	deserializeUnsignedChar(&output->data[14], microCDRReader);
	deserializeUnsignedChar(&output->data[15], microCDRReader);
	deserializeUnsignedChar(&output->data[16], microCDRReader);
	deserializeUnsignedChar(&output->data[17], microCDRReader);
	deserializeUnsignedChar(&output->data[18], microCDRReader);
	deserializeUnsignedChar(&output->data[19], microCDRReader);
	deserializeUnsignedChar(&output->data[20], microCDRReader);
	deserializeUnsignedChar(&output->data[21], microCDRReader);
	deserializeUnsignedChar(&output->data[22], microCDRReader);
	deserializeUnsignedChar(&output->data[23], microCDRReader);
	deserializeUnsignedChar(&output->data[24], microCDRReader);
	deserializeUnsignedChar(&output->data[25], microCDRReader);
	deserializeUnsignedChar(&output->data[26], microCDRReader);
	deserializeUnsignedChar(&output->data[27], microCDRReader);
	deserializeUnsignedChar(&output->data[28], microCDRReader);
	deserializeUnsignedChar(&output->data[29], microCDRReader);
	deserializeUnsignedChar(&output->data[30], microCDRReader);
	deserializeUnsignedChar(&output->data[31], microCDRReader);
	deserializeUnsignedChar(&output->data[32], microCDRReader);
	deserializeUnsignedChar(&output->data[33], microCDRReader);
	deserializeUnsignedChar(&output->data[34], microCDRReader);
	deserializeUnsignedChar(&output->data[35], microCDRReader);
	deserializeUnsignedChar(&output->data[36], microCDRReader);
	deserializeUnsignedChar(&output->data[37], microCDRReader);
	deserializeUnsignedChar(&output->data[38], microCDRReader);
	deserializeUnsignedChar(&output->data[39], microCDRReader);
	deserializeUnsignedChar(&output->data[40], microCDRReader);
	deserializeUnsignedChar(&output->data[41], microCDRReader);
	deserializeUnsignedChar(&output->data[42], microCDRReader);
	deserializeUnsignedChar(&output->data[43], microCDRReader);
	deserializeUnsignedChar(&output->data[44], microCDRReader);
	deserializeUnsignedChar(&output->data[45], microCDRReader);
	deserializeUnsignedChar(&output->data[46], microCDRReader);
	deserializeUnsignedChar(&output->data[47], microCDRReader);
	deserializeUnsignedChar(&output->data[48], microCDRReader);
	deserializeUnsignedChar(&output->data[49], microCDRReader);
	deserializeUnsignedChar(&output->data[50], microCDRReader);
	deserializeUnsignedChar(&output->data[51], microCDRReader);
	deserializeUnsignedChar(&output->data[52], microCDRReader);
	deserializeUnsignedChar(&output->data[53], microCDRReader);
	deserializeUnsignedChar(&output->data[54], microCDRReader);
	deserializeUnsignedChar(&output->data[55], microCDRReader);
	deserializeUnsignedChar(&output->data[56], microCDRReader);
	deserializeUnsignedChar(&output->data[57], microCDRReader);
	deserializeUnsignedChar(&output->data[58], microCDRReader);
	deserializeUnsignedChar(&output->data[59], microCDRReader);
	deserializeUnsignedChar(&output->data[60], microCDRReader);
	deserializeUnsignedChar(&output->data[61], microCDRReader);
	deserializeUnsignedChar(&output->data[62], microCDRReader);
	deserializeUnsignedChar(&output->data[63], microCDRReader);
	deserializeUnsignedChar(&output->data[64], microCDRReader);
	deserializeUnsignedChar(&output->data[65], microCDRReader);
	deserializeUnsignedChar(&output->data[66], microCDRReader);
	deserializeUnsignedChar(&output->data[67], microCDRReader);
	deserializeUnsignedChar(&output->data[68], microCDRReader);
	deserializeUnsignedChar(&output->data[69], microCDRReader);
	deserializeUnsignedChar(&output->data[70], microCDRReader);
	deserializeUnsignedChar(&output->data[71], microCDRReader);
	deserializeUnsignedChar(&output->data[72], microCDRReader);
	deserializeUnsignedChar(&output->data[73], microCDRReader);
	deserializeUnsignedChar(&output->data[74], microCDRReader);
	deserializeUnsignedChar(&output->data[75], microCDRReader);
	deserializeUnsignedChar(&output->data[76], microCDRReader);
	deserializeUnsignedChar(&output->data[77], microCDRReader);
	deserializeUnsignedChar(&output->data[78], microCDRReader);

}