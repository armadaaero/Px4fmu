/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/satellite_info.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/satellite_info.h>

constexpr char __orb_satellite_info_fields[] = "uint64_t timestamp;uint8_t count;uint8_t[20] svid;uint8_t[20] used;uint8_t[20] elevation;uint8_t[20] azimuth;uint8_t[20] snr;uint8_t[3] _padding0;";

ORB_DEFINE(satellite_info, struct satellite_info_s, 109,
    __orb_satellite_info_fields);



void serialize_satellite_info(const struct satellite_info_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeUnsignedChar(input->count, microCDRWriter);
	serializeUnsignedCharArray(input->svid, 20, microCDRWriter);
	serializeUnsignedCharArray(input->used, 20, microCDRWriter);
	serializeUnsignedCharArray(input->elevation, 20, microCDRWriter);
	serializeUnsignedCharArray(input->azimuth, 20, microCDRWriter);
	serializeUnsignedCharArray(input->snr, 20, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_satellite_info(struct satellite_info_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeUnsignedChar(&output->count, microCDRReader);
	deserializeUnsignedChar(&output->svid[0], microCDRReader);
	deserializeUnsignedChar(&output->svid[1], microCDRReader);
	deserializeUnsignedChar(&output->svid[2], microCDRReader);
	deserializeUnsignedChar(&output->svid[3], microCDRReader);
	deserializeUnsignedChar(&output->svid[4], microCDRReader);
	deserializeUnsignedChar(&output->svid[5], microCDRReader);
	deserializeUnsignedChar(&output->svid[6], microCDRReader);
	deserializeUnsignedChar(&output->svid[7], microCDRReader);
	deserializeUnsignedChar(&output->svid[8], microCDRReader);
	deserializeUnsignedChar(&output->svid[9], microCDRReader);
	deserializeUnsignedChar(&output->svid[10], microCDRReader);
	deserializeUnsignedChar(&output->svid[11], microCDRReader);
	deserializeUnsignedChar(&output->svid[12], microCDRReader);
	deserializeUnsignedChar(&output->svid[13], microCDRReader);
	deserializeUnsignedChar(&output->svid[14], microCDRReader);
	deserializeUnsignedChar(&output->svid[15], microCDRReader);
	deserializeUnsignedChar(&output->svid[16], microCDRReader);
	deserializeUnsignedChar(&output->svid[17], microCDRReader);
	deserializeUnsignedChar(&output->svid[18], microCDRReader);
	deserializeUnsignedChar(&output->svid[19], microCDRReader);
	deserializeUnsignedChar(&output->used[0], microCDRReader);
	deserializeUnsignedChar(&output->used[1], microCDRReader);
	deserializeUnsignedChar(&output->used[2], microCDRReader);
	deserializeUnsignedChar(&output->used[3], microCDRReader);
	deserializeUnsignedChar(&output->used[4], microCDRReader);
	deserializeUnsignedChar(&output->used[5], microCDRReader);
	deserializeUnsignedChar(&output->used[6], microCDRReader);
	deserializeUnsignedChar(&output->used[7], microCDRReader);
	deserializeUnsignedChar(&output->used[8], microCDRReader);
	deserializeUnsignedChar(&output->used[9], microCDRReader);
	deserializeUnsignedChar(&output->used[10], microCDRReader);
	deserializeUnsignedChar(&output->used[11], microCDRReader);
	deserializeUnsignedChar(&output->used[12], microCDRReader);
	deserializeUnsignedChar(&output->used[13], microCDRReader);
	deserializeUnsignedChar(&output->used[14], microCDRReader);
	deserializeUnsignedChar(&output->used[15], microCDRReader);
	deserializeUnsignedChar(&output->used[16], microCDRReader);
	deserializeUnsignedChar(&output->used[17], microCDRReader);
	deserializeUnsignedChar(&output->used[18], microCDRReader);
	deserializeUnsignedChar(&output->used[19], microCDRReader);
	deserializeUnsignedChar(&output->elevation[0], microCDRReader);
	deserializeUnsignedChar(&output->elevation[1], microCDRReader);
	deserializeUnsignedChar(&output->elevation[2], microCDRReader);
	deserializeUnsignedChar(&output->elevation[3], microCDRReader);
	deserializeUnsignedChar(&output->elevation[4], microCDRReader);
	deserializeUnsignedChar(&output->elevation[5], microCDRReader);
	deserializeUnsignedChar(&output->elevation[6], microCDRReader);
	deserializeUnsignedChar(&output->elevation[7], microCDRReader);
	deserializeUnsignedChar(&output->elevation[8], microCDRReader);
	deserializeUnsignedChar(&output->elevation[9], microCDRReader);
	deserializeUnsignedChar(&output->elevation[10], microCDRReader);
	deserializeUnsignedChar(&output->elevation[11], microCDRReader);
	deserializeUnsignedChar(&output->elevation[12], microCDRReader);
	deserializeUnsignedChar(&output->elevation[13], microCDRReader);
	deserializeUnsignedChar(&output->elevation[14], microCDRReader);
	deserializeUnsignedChar(&output->elevation[15], microCDRReader);
	deserializeUnsignedChar(&output->elevation[16], microCDRReader);
	deserializeUnsignedChar(&output->elevation[17], microCDRReader);
	deserializeUnsignedChar(&output->elevation[18], microCDRReader);
	deserializeUnsignedChar(&output->elevation[19], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[0], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[1], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[2], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[3], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[4], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[5], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[6], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[7], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[8], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[9], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[10], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[11], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[12], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[13], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[14], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[15], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[16], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[17], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[18], microCDRReader);
	deserializeUnsignedChar(&output->azimuth[19], microCDRReader);
	deserializeUnsignedChar(&output->snr[0], microCDRReader);
	deserializeUnsignedChar(&output->snr[1], microCDRReader);
	deserializeUnsignedChar(&output->snr[2], microCDRReader);
	deserializeUnsignedChar(&output->snr[3], microCDRReader);
	deserializeUnsignedChar(&output->snr[4], microCDRReader);
	deserializeUnsignedChar(&output->snr[5], microCDRReader);
	deserializeUnsignedChar(&output->snr[6], microCDRReader);
	deserializeUnsignedChar(&output->snr[7], microCDRReader);
	deserializeUnsignedChar(&output->snr[8], microCDRReader);
	deserializeUnsignedChar(&output->snr[9], microCDRReader);
	deserializeUnsignedChar(&output->snr[10], microCDRReader);
	deserializeUnsignedChar(&output->snr[11], microCDRReader);
	deserializeUnsignedChar(&output->snr[12], microCDRReader);
	deserializeUnsignedChar(&output->snr[13], microCDRReader);
	deserializeUnsignedChar(&output->snr[14], microCDRReader);
	deserializeUnsignedChar(&output->snr[15], microCDRReader);
	deserializeUnsignedChar(&output->snr[16], microCDRReader);
	deserializeUnsignedChar(&output->snr[17], microCDRReader);
	deserializeUnsignedChar(&output->snr[18], microCDRReader);
	deserializeUnsignedChar(&output->snr[19], microCDRReader);

}