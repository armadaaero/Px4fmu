/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/adc_report.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/adc_report.h>

constexpr char __orb_adc_report_fields[] = "uint64_t timestamp;float[12] channel_value;int16_t[12] channel_id;";

ORB_DEFINE(adc_report, struct adc_report_s, 80,
    __orb_adc_report_fields);



void serialize_adc_report(const struct adc_report_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeFloatArray(input->channel_value, 12, microCDRWriter);
	serializeShortArray(input->channel_id, 12, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_adc_report(struct adc_report_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeFloat(&output->channel_value[0], microCDRReader);
	deserializeFloat(&output->channel_value[1], microCDRReader);
	deserializeFloat(&output->channel_value[2], microCDRReader);
	deserializeFloat(&output->channel_value[3], microCDRReader);
	deserializeFloat(&output->channel_value[4], microCDRReader);
	deserializeFloat(&output->channel_value[5], microCDRReader);
	deserializeFloat(&output->channel_value[6], microCDRReader);
	deserializeFloat(&output->channel_value[7], microCDRReader);
	deserializeFloat(&output->channel_value[8], microCDRReader);
	deserializeFloat(&output->channel_value[9], microCDRReader);
	deserializeFloat(&output->channel_value[10], microCDRReader);
	deserializeFloat(&output->channel_value[11], microCDRReader);
	deserializeShort(&output->channel_id[0], microCDRReader);
	deserializeShort(&output->channel_id[1], microCDRReader);
	deserializeShort(&output->channel_id[2], microCDRReader);
	deserializeShort(&output->channel_id[3], microCDRReader);
	deserializeShort(&output->channel_id[4], microCDRReader);
	deserializeShort(&output->channel_id[5], microCDRReader);
	deserializeShort(&output->channel_id[6], microCDRReader);
	deserializeShort(&output->channel_id[7], microCDRReader);
	deserializeShort(&output->channel_id[8], microCDRReader);
	deserializeShort(&output->channel_id[9], microCDRReader);
	deserializeShort(&output->channel_id[10], microCDRReader);
	deserializeShort(&output->channel_id[11], microCDRReader);

}