/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/position_setpoint.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/position_setpoint.h>

constexpr char __orb_position_setpoint_fields[] = "uint64_t timestamp;double lat;double lon;float x;float y;float z;float vx;float vy;float vz;float alt;float yaw;float yawspeed;float loiter_radius;float pitch_min;float a_x;float a_y;float a_z;float acceptance_radius;float cruising_speed;float cruising_throttle;bool valid;uint8_t type;bool position_valid;bool velocity_valid;uint8_t velocity_frame;bool alt_valid;bool yaw_valid;bool disable_mc_yaw_control;bool yawspeed_valid;int8_t loiter_direction;bool acceleration_valid;bool acceleration_is_force;";

ORB_DEFINE(position_setpoint, struct position_setpoint_s, 104,
    __orb_position_setpoint_fields);



void serialize_position_setpoint(const struct position_setpoint_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeDouble(input->lat, microCDRWriter);
	serializeDouble(input->lon, microCDRWriter);
	serializeFloat(input->x, microCDRWriter);
	serializeFloat(input->y, microCDRWriter);
	serializeFloat(input->z, microCDRWriter);
	serializeFloat(input->vx, microCDRWriter);
	serializeFloat(input->vy, microCDRWriter);
	serializeFloat(input->vz, microCDRWriter);
	serializeFloat(input->alt, microCDRWriter);
	serializeFloat(input->yaw, microCDRWriter);
	serializeFloat(input->yawspeed, microCDRWriter);
	serializeFloat(input->loiter_radius, microCDRWriter);
	serializeFloat(input->pitch_min, microCDRWriter);
	serializeFloat(input->a_x, microCDRWriter);
	serializeFloat(input->a_y, microCDRWriter);
	serializeFloat(input->a_z, microCDRWriter);
	serializeFloat(input->acceptance_radius, microCDRWriter);
	serializeFloat(input->cruising_speed, microCDRWriter);
	serializeFloat(input->cruising_throttle, microCDRWriter);
	serializeBool(input->valid, microCDRWriter);
	serializeUnsignedChar(input->type, microCDRWriter);
	serializeBool(input->position_valid, microCDRWriter);
	serializeBool(input->velocity_valid, microCDRWriter);
	serializeUnsignedChar(input->velocity_frame, microCDRWriter);
	serializeBool(input->alt_valid, microCDRWriter);
	serializeBool(input->yaw_valid, microCDRWriter);
	serializeBool(input->disable_mc_yaw_control, microCDRWriter);
	serializeBool(input->yawspeed_valid, microCDRWriter);
	serializeSignedChar(input->loiter_direction, microCDRWriter);
	serializeBool(input->acceleration_valid, microCDRWriter);
	serializeBool(input->acceleration_is_force, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_position_setpoint(struct position_setpoint_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeDouble(&output->lat, microCDRReader);
	deserializeDouble(&output->lon, microCDRReader);
	deserializeFloat(&output->x, microCDRReader);
	deserializeFloat(&output->y, microCDRReader);
	deserializeFloat(&output->z, microCDRReader);
	deserializeFloat(&output->vx, microCDRReader);
	deserializeFloat(&output->vy, microCDRReader);
	deserializeFloat(&output->vz, microCDRReader);
	deserializeFloat(&output->alt, microCDRReader);
	deserializeFloat(&output->yaw, microCDRReader);
	deserializeFloat(&output->yawspeed, microCDRReader);
	deserializeFloat(&output->loiter_radius, microCDRReader);
	deserializeFloat(&output->pitch_min, microCDRReader);
	deserializeFloat(&output->a_x, microCDRReader);
	deserializeFloat(&output->a_y, microCDRReader);
	deserializeFloat(&output->a_z, microCDRReader);
	deserializeFloat(&output->acceptance_radius, microCDRReader);
	deserializeFloat(&output->cruising_speed, microCDRReader);
	deserializeFloat(&output->cruising_throttle, microCDRReader);
	deserializeBool(&output->valid, microCDRReader);
	deserializeUnsignedChar(&output->type, microCDRReader);
	deserializeBool(&output->position_valid, microCDRReader);
	deserializeBool(&output->velocity_valid, microCDRReader);
	deserializeUnsignedChar(&output->velocity_frame, microCDRReader);
	deserializeBool(&output->alt_valid, microCDRReader);
	deserializeBool(&output->yaw_valid, microCDRReader);
	deserializeBool(&output->disable_mc_yaw_control, microCDRReader);
	deserializeBool(&output->yawspeed_valid, microCDRReader);
	deserializeSignedChar(&output->loiter_direction, microCDRReader);
	deserializeBool(&output->acceleration_valid, microCDRReader);
	deserializeBool(&output->acceleration_is_force, microCDRReader);

}