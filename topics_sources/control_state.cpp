/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/control_state.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/control_state.h>

constexpr char __orb_control_state_fields[] = "uint64_t timestamp;float x_acc;float y_acc;float z_acc;float x_vel;float y_vel;float z_vel;float x_pos;float y_pos;float z_pos;float airspeed;float[3] vel_variance;float[3] pos_variance;float[4] q;float[4] delta_q_reset;float roll_rate;float pitch_rate;float yaw_rate;float horz_acc_mag;float roll_rate_bias;float pitch_rate_bias;float yaw_rate_bias;bool airspeed_valid;uint8_t quat_reset_counter;uint8_t[2] _padding0;";

ORB_DEFINE(control_state, struct control_state_s, 134,
    __orb_control_state_fields);



void serialize_control_state(const struct control_state_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeFloat(input->x_acc, microCDRWriter);
	serializeFloat(input->y_acc, microCDRWriter);
	serializeFloat(input->z_acc, microCDRWriter);
	serializeFloat(input->x_vel, microCDRWriter);
	serializeFloat(input->y_vel, microCDRWriter);
	serializeFloat(input->z_vel, microCDRWriter);
	serializeFloat(input->x_pos, microCDRWriter);
	serializeFloat(input->y_pos, microCDRWriter);
	serializeFloat(input->z_pos, microCDRWriter);
	serializeFloat(input->airspeed, microCDRWriter);
	serializeFloatArray(input->vel_variance, 3, microCDRWriter);
	serializeFloatArray(input->pos_variance, 3, microCDRWriter);
	serializeFloatArray(input->q, 4, microCDRWriter);
	serializeFloatArray(input->delta_q_reset, 4, microCDRWriter);
	serializeFloat(input->roll_rate, microCDRWriter);
	serializeFloat(input->pitch_rate, microCDRWriter);
	serializeFloat(input->yaw_rate, microCDRWriter);
	serializeFloat(input->horz_acc_mag, microCDRWriter);
	serializeFloat(input->roll_rate_bias, microCDRWriter);
	serializeFloat(input->pitch_rate_bias, microCDRWriter);
	serializeFloat(input->yaw_rate_bias, microCDRWriter);
	serializeBool(input->airspeed_valid, microCDRWriter);
	serializeUnsignedChar(input->quat_reset_counter, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_control_state(struct control_state_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeFloat(&output->x_acc, microCDRReader);
	deserializeFloat(&output->y_acc, microCDRReader);
	deserializeFloat(&output->z_acc, microCDRReader);
	deserializeFloat(&output->x_vel, microCDRReader);
	deserializeFloat(&output->y_vel, microCDRReader);
	deserializeFloat(&output->z_vel, microCDRReader);
	deserializeFloat(&output->x_pos, microCDRReader);
	deserializeFloat(&output->y_pos, microCDRReader);
	deserializeFloat(&output->z_pos, microCDRReader);
	deserializeFloat(&output->airspeed, microCDRReader);
	deserializeFloat(&output->vel_variance[0], microCDRReader);
	deserializeFloat(&output->vel_variance[1], microCDRReader);
	deserializeFloat(&output->vel_variance[2], microCDRReader);
	deserializeFloat(&output->pos_variance[0], microCDRReader);
	deserializeFloat(&output->pos_variance[1], microCDRReader);
	deserializeFloat(&output->pos_variance[2], microCDRReader);
	deserializeFloat(&output->q[0], microCDRReader);
	deserializeFloat(&output->q[1], microCDRReader);
	deserializeFloat(&output->q[2], microCDRReader);
	deserializeFloat(&output->q[3], microCDRReader);
	deserializeFloat(&output->delta_q_reset[0], microCDRReader);
	deserializeFloat(&output->delta_q_reset[1], microCDRReader);
	deserializeFloat(&output->delta_q_reset[2], microCDRReader);
	deserializeFloat(&output->delta_q_reset[3], microCDRReader);
	deserializeFloat(&output->roll_rate, microCDRReader);
	deserializeFloat(&output->pitch_rate, microCDRReader);
	deserializeFloat(&output->yaw_rate, microCDRReader);
	deserializeFloat(&output->horz_acc_mag, microCDRReader);
	deserializeFloat(&output->roll_rate_bias, microCDRReader);
	deserializeFloat(&output->pitch_rate_bias, microCDRReader);
	deserializeFloat(&output->yaw_rate_bias, microCDRReader);
	deserializeBool(&output->airspeed_valid, microCDRReader);
	deserializeUnsignedChar(&output->quat_reset_counter, microCDRReader);

}