/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /home/intrepid/src1210_PixHawk2/Firmware/msg/sensor_combined.msg */


#include <px4_config.h>
#include <drivers/drv_orb_dev.h>
#include <microcdr/microCdr.h>
#include <uORB/topics/sensor_combined.h>

constexpr char __orb_sensor_combined_fields[] = "uint64_t timestamp;float[3] gyro_rad;uint32_t gyro_integral_dt;int32_t accelerometer_timestamp_relative;float[3] accelerometer_m_s2;uint32_t accelerometer_integral_dt;int32_t magnetometer_timestamp_relative;float[3] magnetometer_ga;int32_t baro_timestamp_relative;float baro_alt_meter;float baro_temp_celcius;";

ORB_DEFINE(sensor_combined, struct sensor_combined_s, 72,
    __orb_sensor_combined_fields);



void serialize_sensor_combined(const struct sensor_combined_s *input, char *output, uint32_t *length, struct microCDR *microCDRWriter)
{
    if (nullptr == input || nullptr == output || nullptr == length || nullptr == microCDRWriter) return;

    resetStaticMicroCDRForSerialize(microCDRWriter);

	serializeFloatArray(input->gyro_rad, 3, microCDRWriter);
	serializeUnsignedInt(input->gyro_integral_dt, microCDRWriter);
	serializeInt(input->accelerometer_timestamp_relative, microCDRWriter);
	serializeFloatArray(input->accelerometer_m_s2, 3, microCDRWriter);
	serializeUnsignedInt(input->accelerometer_integral_dt, microCDRWriter);
	serializeInt(input->magnetometer_timestamp_relative, microCDRWriter);
	serializeFloatArray(input->magnetometer_ga, 3, microCDRWriter);
	serializeInt(input->baro_timestamp_relative, microCDRWriter);
	serializeFloat(input->baro_alt_meter, microCDRWriter);
	serializeFloat(input->baro_temp_celcius, microCDRWriter);


    (*length) = microCDRWriter->m_microBuffer->m_serializedBuffer;
}

void deserialize_sensor_combined(struct sensor_combined_s *output, char *input, struct microCDR *microCDRReader)
{
    if (nullptr == output || nullptr == input || nullptr == microCDRReader) return;

    resetStaticMicroCDRForDeserialize(microCDRReader);

	deserializeFloat(&output->gyro_rad[0], microCDRReader);
	deserializeFloat(&output->gyro_rad[1], microCDRReader);
	deserializeFloat(&output->gyro_rad[2], microCDRReader);
	deserializeUnsignedInt(&output->gyro_integral_dt, microCDRReader);
	deserializeInt(&output->accelerometer_timestamp_relative, microCDRReader);
	deserializeFloat(&output->accelerometer_m_s2[0], microCDRReader);
	deserializeFloat(&output->accelerometer_m_s2[1], microCDRReader);
	deserializeFloat(&output->accelerometer_m_s2[2], microCDRReader);
	deserializeUnsignedInt(&output->accelerometer_integral_dt, microCDRReader);
	deserializeInt(&output->magnetometer_timestamp_relative, microCDRReader);
	deserializeFloat(&output->magnetometer_ga[0], microCDRReader);
	deserializeFloat(&output->magnetometer_ga[1], microCDRReader);
	deserializeFloat(&output->magnetometer_ga[2], microCDRReader);
	deserializeInt(&output->baro_timestamp_relative, microCDRReader);
	deserializeFloat(&output->baro_alt_meter, microCDRReader);
	deserializeFloat(&output->baro_temp_celcius, microCDRReader);

}